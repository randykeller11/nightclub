{"ast":null,"code":"function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n// @ts-ignore\nimport { Idea } from \"./idea\";\n/**\n * an world is a set of ideas\n */\n\nexport class World {\n  constructor() {\n    _defineProperty(this, \"id\", void 0);\n\n    _defineProperty(this, \"userId\", void 0);\n\n    _defineProperty(this, \"name\", void 0);\n\n    _defineProperty(this, \"slug\", void 0);\n\n    _defineProperty(this, \"predecessor\", void 0);\n\n    _defineProperty(this, \"dataUrl\", void 0);\n\n    _defineProperty(this, \"upToDate\", void 0);\n\n    return this;\n  }\n\n  setFromBackendWorld(backendWorld) {\n    this.id = backendWorld.id;\n    this.userId = backendWorld.user_id;\n    this.name = backendWorld.name;\n    this.slug = backendWorld.slug;\n    this.predecessor = backendWorld.predecessor;\n    this.dataUrl = backendWorld.data_url;\n    this.upToDate = backendWorld.up_to_date;\n    return this;\n  }\n\n  getIdea() {\n    return new Idea().setFromCreation(hashStringToRange(this.slug || this.dataUrl || \"come on son\", 3), hashStringToRange(this.id), 0.96);\n  }\n\n  getHex() {\n    return this.getIdea().getHex();\n  }\n\n}\nconst AVG_CHAR_VAL = 100; // each char is roughly 100, so loop every ~50 chars\n\nconst hashStringToRange = (str, loop = 8) => {\n  let count = 0;\n\n  for (let i = 0; i < str.length; i++) {\n    count += str.substr(i, 1).charCodeAt(0);\n  }\n\n  const scaledLoop = loop * AVG_CHAR_VAL;\n  return count % scaledLoop / scaledLoop;\n};","map":{"version":3,"sources":["/Users/dub_ceo/Desktop/spacesvr-starter/src/ideas/Builder12/layers/basis/classes/world.ts"],"names":["Idea","World","constructor","setFromBackendWorld","backendWorld","id","userId","user_id","name","slug","predecessor","dataUrl","data_url","upToDate","up_to_date","getIdea","setFromCreation","hashStringToRange","getHex","AVG_CHAR_VAL","str","loop","count","i","length","substr","charCodeAt","scaledLoop"],"mappings":";;AAAA;AAGA,SAASA,IAAT,QAAqB,QAArB;AAEA;AACA;AACA;;AACA,OAAO,MAAMC,KAAN,CAAY;AASjBC,EAAAA,WAAW,GAAG;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AACZ,WAAO,IAAP;AACD;;AAEDC,EAAAA,mBAAmB,CAACC,YAAD,EAA6B;AAC9C,SAAKC,EAAL,GAAUD,YAAY,CAACC,EAAvB;AACA,SAAKC,MAAL,GAAcF,YAAY,CAACG,OAA3B;AACA,SAAKC,IAAL,GAAYJ,YAAY,CAACI,IAAzB;AACA,SAAKC,IAAL,GAAYL,YAAY,CAACK,IAAzB;AACA,SAAKC,WAAL,GAAmBN,YAAY,CAACM,WAAhC;AACA,SAAKC,OAAL,GAAeP,YAAY,CAACQ,QAA5B;AACA,SAAKC,QAAL,GAAgBT,YAAY,CAACU,UAA7B;AAEA,WAAO,IAAP;AACD;;AAEDC,EAAAA,OAAO,GAAS;AACd,WAAO,IAAIf,IAAJ,GAAWgB,eAAX,CACLC,iBAAiB,CAAC,KAAKR,IAAL,IAAa,KAAKE,OAAlB,IAA6B,aAA9B,EAA6C,CAA7C,CADZ,EAELM,iBAAiB,CAAC,KAAKZ,EAAN,CAFZ,EAGL,IAHK,CAAP;AAKD;;AAEDa,EAAAA,MAAM,GAAW;AACf,WAAO,KAAKH,OAAL,GAAeG,MAAf,EAAP;AACD;;AAnCgB;AAsCnB,MAAMC,YAAY,GAAG,GAArB,C,CAA0B;;AAE1B,MAAMF,iBAAiB,GAAG,CAACG,GAAD,EAAcC,IAAI,GAAG,CAArB,KAAmC;AAC3D,MAAIC,KAAK,GAAG,CAAZ;;AACA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,GAAG,CAACI,MAAxB,EAAgCD,CAAC,EAAjC,EAAqC;AACnCD,IAAAA,KAAK,IAAIF,GAAG,CAACK,MAAJ,CAAWF,CAAX,EAAc,CAAd,EAAiBG,UAAjB,CAA4B,CAA5B,CAAT;AACD;;AACD,QAAMC,UAAU,GAAGN,IAAI,GAAGF,YAA1B;AACA,SAAQG,KAAK,GAAGK,UAAT,GAAuBA,UAA9B;AACD,CAPD","sourcesContent":["// @ts-ignore\nimport * as culori from \"culori\";\nimport { BackendWorld } from \"../types/world\";\nimport { Idea } from \"./idea\";\n\n/**\n * an world is a set of ideas\n */\nexport class World {\n  id: string;\n  userId: number;\n  name: string;\n  slug?: string;\n  predecessor?: string;\n  dataUrl?: string;\n  upToDate: boolean;\n\n  constructor() {\n    return this;\n  }\n\n  setFromBackendWorld(backendWorld: BackendWorld) {\n    this.id = backendWorld.id;\n    this.userId = backendWorld.user_id;\n    this.name = backendWorld.name;\n    this.slug = backendWorld.slug;\n    this.predecessor = backendWorld.predecessor;\n    this.dataUrl = backendWorld.data_url;\n    this.upToDate = backendWorld.up_to_date;\n\n    return this;\n  }\n\n  getIdea(): Idea {\n    return new Idea().setFromCreation(\n      hashStringToRange(this.slug || this.dataUrl || \"come on son\", 3),\n      hashStringToRange(this.id),\n      0.96\n    );\n  }\n\n  getHex(): string {\n    return this.getIdea().getHex();\n  }\n}\n\nconst AVG_CHAR_VAL = 100; // each char is roughly 100, so loop every ~50 chars\n\nconst hashStringToRange = (str: string, loop = 8): number => {\n  let count = 0;\n  for (let i = 0; i < str.length; i++) {\n    count += str.substr(i, 1).charCodeAt(0);\n  }\n  const scaledLoop = loop * AVG_CHAR_VAL;\n  return (count % scaledLoop) / scaledLoop;\n};\n"]},"metadata":{},"sourceType":"module"}