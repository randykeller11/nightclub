{"ast":null,"code":"import _defineProperty from \"/Users/dub_ceo/Desktop/nightclub/node_modules/next/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport _toConsumableArray from \"/Users/dub_ceo/Desktop/nightclub/node_modules/next/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _objectWithoutProperties from \"/Users/dub_ceo/Desktop/nightclub/node_modules/next/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\n\nvar _jsxFileName = \"/Users/dub_ceo/Desktop/nightclub/src/ideas/CloudySky/index.tsx\",\n    _s = $RefreshSig$();\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n// @ts-ignore\nimport { Color } from \"three\";\nimport { useSkyMat } from \"./materials/sky\";\nvar RADIUS = 100;\n\nvar getGLSLCol = function getGLSLCol(c) {\n  var hex = c.getHex();\n  return [(hex >> 16 & 0xff) / 255, (hex >> 8 & 0xff) / 255, (hex & 0xff) / 255];\n};\n\nexport default function CloudySky(props) {\n  _s();\n\n  var color = props.color,\n      restProps = _objectWithoutProperties(props, [\"color\"]);\n\n  var COLORS = [0.62, 0.988, 0.992, 0.757, 0.922, 0.992, 0.867, 0.847, 0.988, 0.961, 0.765, 0.984];\n\n  if (color) {\n    var col = new Color(color);\n    var col1 = new Color(color).clone().multiplyScalar(0.8);\n    var col2 = new Color(color).clone().multiplyScalar(0.75);\n    var col3 = new Color(color).clone().multiplyScalar(0.5);\n    COLORS = [].concat(_toConsumableArray(getGLSLCol(col)), _toConsumableArray(getGLSLCol(col1)), _toConsumableArray(getGLSLCol(col2)), _toConsumableArray(getGLSLCol(col3)));\n  }\n\n  var mat = useSkyMat(RADIUS, COLORS);\n  return /*#__PURE__*/_jsxDEV(\"group\", _objectSpread(_objectSpread({}, restProps), {}, {\n    name: \"cloudy-sky\",\n    children: /*#__PURE__*/_jsxDEV(\"mesh\", {\n      material: mat,\n      children: /*#__PURE__*/_jsxDEV(\"sphereBufferGeometry\", {\n        args: [RADIUS, 50, 50]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this)\n  }), void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 5\n  }, this);\n}\n\n_s(CloudySky, \"x5BS3aSjUZEdpbu50PxTqZT2E1k=\", false, function () {\n  return [useSkyMat];\n});\n\n_c = CloudySky;\n\nvar _c;\n\n$RefreshReg$(_c, \"CloudySky\");","map":{"version":3,"sources":["/Users/dub_ceo/Desktop/nightclub/src/ideas/CloudySky/index.tsx"],"names":["Color","useSkyMat","RADIUS","getGLSLCol","c","hex","getHex","CloudySky","props","color","restProps","COLORS","col","col1","clone","multiplyScalar","col2","col3","mat"],"mappings":";;;;;;;;;;;;AAAA;AAIA,SAASA,KAAT,QAA+C,OAA/C;AAGA,SAASC,SAAT,QAA0B,iBAA1B;AAMA,IAAMC,MAAM,GAAG,GAAf;;AAEA,IAAMC,UAAU,GAAG,SAAbA,UAAa,CAACC,CAAD,EAAc;AAC/B,MAAMC,GAAG,GAAGD,CAAC,CAACE,MAAF,EAAZ;AACA,SAAO,CACL,CAAED,GAAG,IAAI,EAAR,GAAc,IAAf,IAAuB,GADlB,EAEL,CAAEA,GAAG,IAAI,CAAR,GAAa,IAAd,IAAsB,GAFjB,EAGL,CAACA,GAAG,GAAG,IAAP,IAAe,GAHV,CAAP;AAKD,CAPD;;AASA,eAAe,SAASE,SAAT,CAAmBC,KAAnB,EAAuC;AAAA;;AAAA,MAC5CC,KAD4C,GACpBD,KADoB,CAC5CC,KAD4C;AAAA,MAClCC,SADkC,4BACpBF,KADoB;;AAGpD,MAAIG,MAAM,GAAG,CACX,IADW,EACL,KADK,EACE,KADF,EACS,KADT,EACgB,KADhB,EACuB,KADvB,EAC8B,KAD9B,EACqC,KADrC,EAC4C,KAD5C,EACmD,KADnD,EAC0D,KAD1D,EAEX,KAFW,CAAb;;AAIA,MAAIF,KAAJ,EAAW;AACT,QAAMG,GAAG,GAAG,IAAIZ,KAAJ,CAAUS,KAAV,CAAZ;AACA,QAAMI,IAAI,GAAG,IAAIb,KAAJ,CAAUS,KAAV,EAAiBK,KAAjB,GAAyBC,cAAzB,CAAwC,GAAxC,CAAb;AACA,QAAMC,IAAI,GAAG,IAAIhB,KAAJ,CAAUS,KAAV,EAAiBK,KAAjB,GAAyBC,cAAzB,CAAwC,IAAxC,CAAb;AACA,QAAME,IAAI,GAAG,IAAIjB,KAAJ,CAAUS,KAAV,EAAiBK,KAAjB,GAAyBC,cAAzB,CAAwC,GAAxC,CAAb;AACAJ,IAAAA,MAAM,gCACDR,UAAU,CAACS,GAAD,CADT,sBAEDT,UAAU,CAACU,IAAD,CAFT,sBAGDV,UAAU,CAACa,IAAD,CAHT,sBAIDb,UAAU,CAACc,IAAD,CAJT,EAAN;AAMD;;AAED,MAAMC,GAAG,GAAGjB,SAAS,CAACC,MAAD,EAASS,MAAT,CAArB;AAEA,sBACE,iDAAWD,SAAX;AAAsB,IAAA,IAAI,EAAC,YAA3B;AAAA,2BACE;AAAM,MAAA,QAAQ,EAAEQ,GAAhB;AAAA,6BACE;AAAsB,QAAA,IAAI,EAAE,CAAChB,MAAD,EAAS,EAAT,EAAa,EAAb;AAA5B;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAOD;;GA7BuBK,S;UAoBVN,S;;;KApBUM,S","sourcesContent":["// @ts-ignore\nimport * as culori from \"culori\";\nimport { GroupProps, useFrame } from \"@react-three/fiber\";\nimport { useMemo } from \"react\";\nimport { Color, ShaderMaterial, Uniform } from \"three\";\nimport * as THREE from \"three\";\nimport { useLimiter } from \"spacesvr\";\nimport { useSkyMat } from \"./materials/sky\";\n\ntype GradientSky = {\n  color?: string;\n} & GroupProps;\n\nconst RADIUS = 100;\n\nconst getGLSLCol = (c: Color) => {\n  const hex = c.getHex();\n  return [\n    ((hex >> 16) & 0xff) / 255,\n    ((hex >> 8) & 0xff) / 255,\n    (hex & 0xff) / 255,\n  ];\n};\n\nexport default function CloudySky(props: GradientSky) {\n  const { color, ...restProps } = props;\n\n  let COLORS = [\n    0.62, 0.988, 0.992, 0.757, 0.922, 0.992, 0.867, 0.847, 0.988, 0.961, 0.765,\n    0.984,\n  ];\n  if (color) {\n    const col = new Color(color);\n    const col1 = new Color(color).clone().multiplyScalar(0.8);\n    const col2 = new Color(color).clone().multiplyScalar(0.75);\n    const col3 = new Color(color).clone().multiplyScalar(0.5);\n    COLORS = [\n      ...getGLSLCol(col),\n      ...getGLSLCol(col1),\n      ...getGLSLCol(col2),\n      ...getGLSLCol(col3),\n    ];\n  }\n\n  const mat = useSkyMat(RADIUS, COLORS);\n\n  return (\n    <group {...restProps} name=\"cloudy-sky\">\n      <mesh material={mat}>\n        <sphereBufferGeometry args={[RADIUS, 50, 50]} />\n      </mesh>\n    </group>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}