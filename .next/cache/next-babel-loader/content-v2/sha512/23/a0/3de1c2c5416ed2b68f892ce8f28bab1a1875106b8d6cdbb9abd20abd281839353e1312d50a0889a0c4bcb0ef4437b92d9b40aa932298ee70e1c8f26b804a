{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport _defineProperty from \"/Users/dub_ceo/Desktop/spacesvr-starter/node_modules/next/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _objectWithoutProperties from \"/Users/dub_ceo/Desktop/spacesvr-starter/node_modules/next/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\n\nvar _jsxFileName = \"/Users/dub_ceo/Desktop/spacesvr-starter/src/ideas/Builder12/layers/communication/visual/components/Button.tsx\",\n    _s = $RefreshSig$();\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { RoundedBox, Text } from \"@react-three/drei\";\nimport { animated, useSpring, config } from \"react-spring/three\";\nimport { useEffect, useState } from \"react\";\nimport { Interactable } from \"spacesvr\";\nimport { Idea } from \"../../../basis\";\nvar FONT_URL = \"https://d27rt3a60hh1lx.cloudfront.net/fonts/Quicksand_Bold.otf\";\nexport default function Button(props) {\n  _s();\n\n  var children = props.children,\n      textStyles = props.textStyles,\n      onClick = props.onClick,\n      _props$width = props.width,\n      width = _props$width === void 0 ? 1 : _props$width,\n      _props$size = props.size,\n      size = _props$size === void 0 ? 1 : _props$size,\n      idea = props.idea,\n      rest = _objectWithoutProperties(props, [\"children\", \"textStyles\", \"onClick\", \"width\", \"size\", \"idea\"]);\n\n  var HEIGHT = 0.1;\n  var WIDTH = 0.1 * width;\n  var DEPTH = 0.05;\n  var RADIUS = Math.min(WIDTH, HEIGHT, DEPTH) * 0.5;\n\n  var TEXT_STYLES = _objectSpread({\n    color: \"black\",\n    font: FONT_URL,\n    fontSize: 0.05,\n    outlineWidth: 0.004,\n    outlineColor: \"white\",\n    anchorY: \"middle\"\n  }, textStyles);\n\n  var _useState = useState(false),\n      hovered = _useState[0],\n      setHovered = _useState[1];\n\n  var _useState2 = useState(false),\n      clicked = _useState2[0],\n      setClicked = _useState2[1];\n\n  var restColor = idea ? idea.getHex() : \"#aaa\";\n  var hoverColor = idea ? new Idea().setFromCreation(idea.mediation, idea.specificity * 1.3, idea.utility * 1.3).getHex() : \"#fff\";\n\n  var _useSpring = useSpring(_objectSpread({\n    color: hovered ? restColor : hoverColor,\n    scale: clicked ? 0.75 : 1\n  }, config.stiff)),\n      color = _useSpring.color,\n      scale = _useSpring.scale; // spring animation on click\n\n\n  useEffect(function () {\n    if (clicked) {\n      setTimeout(function () {\n        return setClicked(false);\n      }, 150);\n    }\n  }, [clicked]);\n\n  var onButtonClick = function onButtonClick() {\n    if (onClick) {\n      onClick();\n    }\n\n    setClicked(true);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"group\", _objectSpread(_objectSpread({\n    name: \"button-\".concat(children)\n  }, rest), {}, {\n    children: /*#__PURE__*/_jsxDEV(\"group\", {\n      name: \"button-wrapper\",\n      scale: size,\n      children: /*#__PURE__*/_jsxDEV(animated.group, {\n        scale: scale,\n        children: [children && /*#__PURE__*/_jsxDEV(Text, _objectSpread(_objectSpread({}, TEXT_STYLES), {}, {\n          \"position-z\": DEPTH / 2 + 0.001,\n          children: children\n        }), void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Interactable, {\n          onClick: onButtonClick,\n          onHover: function onHover() {\n            return setHovered(true);\n          },\n          onUnHover: function onUnHover() {\n            return setHovered(false);\n          },\n          children: /*#__PURE__*/_jsxDEV(RoundedBox, {\n            args: [WIDTH, HEIGHT, DEPTH],\n            radius: RADIUS,\n            smoothness: 4,\n            children: /*#__PURE__*/_jsxDEV(animated.meshStandardMaterial, {\n              color: color\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 99,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 94,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 7\n    }, this)\n  }), void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 81,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Button, \"fo1uIbgIpj+E5b6HHLouZOccILs=\", false, function () {\n  return [useSpring];\n});\n\n_c = Button;\n\nvar _c;\n\n$RefreshReg$(_c, \"Button\");","map":{"version":3,"sources":["/Users/dub_ceo/Desktop/spacesvr-starter/src/ideas/Builder12/layers/communication/visual/components/Button.tsx"],"names":["RoundedBox","Text","animated","useSpring","config","useEffect","useState","Interactable","Idea","FONT_URL","Button","props","children","textStyles","onClick","width","size","idea","rest","HEIGHT","WIDTH","DEPTH","RADIUS","Math","min","TEXT_STYLES","color","font","fontSize","outlineWidth","outlineColor","anchorY","hovered","setHovered","clicked","setClicked","restColor","getHex","hoverColor","setFromCreation","mediation","specificity","utility","scale","stiff","setTimeout","onButtonClick"],"mappings":"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","sourcesContent":["import { RoundedBox, Text } from \"@react-three/drei\";\nimport { animated, useSpring, config } from \"react-spring/three\";\nimport { useEffect, useState } from \"react\";\nimport { Interactable } from \"spacesvr\";\nimport { GroupProps } from \"@react-three/fiber\";\nimport { Idea } from \"../../../basis\";\n\nconst FONT_URL =\n  \"https://d27rt3a60hh1lx.cloudfront.net/fonts/Quicksand_Bold.otf\";\n\ntype ButtonProps = {\n  children?: string;\n  textStyles?: Partial<React.ComponentProps<typeof Text>>;\n  size?: number;\n  onClick?: () => void;\n  width?: number;\n  idea?: Idea;\n} & GroupProps;\n\nexport default function Button(props: ButtonProps) {\n  const {\n    children,\n    textStyles,\n    onClick,\n    width = 1,\n    size = 1,\n    idea,\n    ...rest\n  } = props;\n\n  const HEIGHT = 0.1;\n  const WIDTH = 0.1 * width;\n  const DEPTH = 0.05;\n  const RADIUS = Math.min(WIDTH, HEIGHT, DEPTH) * 0.5;\n\n  const TEXT_STYLES: Partial<React.ComponentProps<typeof Text>> = {\n    color: \"black\",\n    font: FONT_URL,\n    fontSize: 0.05,\n    outlineWidth: 0.004,\n    outlineColor: \"white\",\n    anchorY: \"middle\",\n    ...textStyles,\n  };\n\n  const [hovered, setHovered] = useState(false);\n  const [clicked, setClicked] = useState(false);\n\n  const restColor = idea ? idea.getHex() : \"#aaa\";\n  const hoverColor = idea\n    ? new Idea()\n        .setFromCreation(\n          idea.mediation,\n          idea.specificity * 1.3,\n          idea.utility * 1.3\n        )\n        .getHex()\n    : \"#fff\";\n\n  const { color, scale } = useSpring({\n    color: hovered ? restColor : hoverColor,\n    scale: clicked ? 0.75 : 1,\n    ...config.stiff,\n  });\n\n  // spring animation on click\n  useEffect(() => {\n    if (clicked) {\n      setTimeout(() => setClicked(false), 150);\n    }\n  }, [clicked]);\n\n  const onButtonClick = () => {\n    if (onClick) {\n      onClick();\n    }\n    setClicked(true);\n  };\n\n  return (\n    <group name={`button-${children}`} {...rest}>\n      <group name=\"button-wrapper\" scale={size}>\n        <animated.group scale={scale}>\n          {children && (\n            <Text {...TEXT_STYLES} position-z={DEPTH / 2 + 0.001}>\n              {children}\n            </Text>\n          )}\n          <Interactable\n            onClick={onButtonClick}\n            onHover={() => setHovered(true)}\n            onUnHover={() => setHovered(false)}\n          >\n            <RoundedBox\n              args={[WIDTH, HEIGHT, DEPTH]}\n              radius={RADIUS}\n              smoothness={4}\n            >\n              <animated.meshStandardMaterial color={color} />\n            </RoundedBox>\n          </Interactable>\n        </animated.group>\n      </group>\n    </group>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}