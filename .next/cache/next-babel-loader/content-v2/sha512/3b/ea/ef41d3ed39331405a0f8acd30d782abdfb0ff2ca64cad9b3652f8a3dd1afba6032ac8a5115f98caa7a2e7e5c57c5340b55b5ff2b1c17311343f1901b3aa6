{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/dub_ceo/Desktop/spacesvr-starter/src/ideas/Builder12/layers/communication/visual/components/TextInput.tsx\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport { RoundedBox, Text } from \"@react-three/drei\";\nimport { useEffect, useRef, useState } from \"react\";\nimport { animated, useSpring } from \"react-spring/three\";\nimport { Interactable, useEnvironment, usePlayer } from \"spacesvr\";\nimport { Vector3 } from \"three\";\nconst FONT_FILE = \"https://d27rt3a60hh1lx.cloudfront.net/fonts/Quicksand_Bold.otf\";\nexport default function TextInput(props) {\n  var _textRef$current, _textRef$current$_tex;\n\n  const {\n    value,\n    setValue,\n    onSubmit,\n    enabled = true,\n    inputType = \"text\",\n    persist\n  } = props,\n        rest = _objectWithoutProperties(props, [\"value\", \"setValue\", \"onSubmit\", \"enabled\", \"inputType\", \"persist\"]);\n\n  const {\n    paused,\n    device\n  } = useEnvironment();\n  const {\n    controls,\n    velocity\n  } = usePlayer();\n  const inputRef = useRef();\n  const {\n    0: focused,\n    1: setFocused\n  } = useState(false);\n  const {\n    0: cursorPos,\n    1: setCursorPos\n  } = useState(null);\n  const protectClick = useRef(false); // used to click off of the input to blur\n\n  const textRef = useRef();\n  const {\n    color\n  } = useSpring({\n    color: focused ? \"#000\" : \"#828282\"\n  });\n  useEffect(() => {\n    if (!inputRef.current && (persist || enabled)) {\n      inputRef.current = document.createElement(\"input\");\n      inputRef.current.setAttribute(\"type\", inputType);\n      inputRef.current.style.zIndex = \"-99\";\n      inputRef.current.style.opacity = \"0\";\n      inputRef.current.style.fontSize = \"16px\"; // this disables zoom on mobile\n\n      inputRef.current.style.position = \"absolute\";\n      inputRef.current.style.left = \"50%\";\n      inputRef.current.style.top = \"0\";\n      inputRef.current.style.transform = \"translate(-50%, 0%)\";\n      inputRef.current.addEventListener(\"focus\", () => setFocused(true));\n      inputRef.current.addEventListener(\"blur\", () => setFocused(false));\n      setCursorPos(inputRef.current.selectionStart);\n      inputRef.current.value = value;\n      document.body.appendChild(inputRef.current);\n      return () => {\n        if (inputRef.current) {\n          document.body.removeChild(inputRef.current);\n          inputRef.current = undefined;\n          setFocused(false);\n        }\n      };\n    }\n  }, [persist, enabled, inputType]);\n  useEffect(() => {\n    // persist inputs will be there while not enabled, so make sure side effects don't run\n    if (!enabled && persist) return;\n\n    if (focused) {\n      velocity.set(new Vector3(0, 0, 0));\n      controls.lock();\n    }\n\n    if (!focused) {\n      velocity.set(new Vector3(0, 0, 0));\n      controls.unlock();\n    }\n\n    if (inputRef.current && focused) {\n      if (!enabled || paused && device.desktop) {\n        inputRef.current.blur();\n      }\n    }\n\n    if (focused) {\n      const onDocClick = () => {\n        if (!protectClick.current && inputRef.current) {\n          inputRef.current.blur();\n        } else if (inputRef.current) {\n          inputRef.current.focus();\n        }\n\n        protectClick.current = false;\n      };\n\n      const onKeyup = e => {\n        if (!focused || !inputRef.current) return;\n\n        if (onSubmit && e.key === \"Enter\") {\n          onSubmit();\n        }\n\n        setCursorPos(inputRef.current.selectionStart);\n        setValue(inputRef.current.value);\n      };\n\n      const onSelectionChange = () => {\n        var _inputRef$current;\n\n        return setCursorPos((inputRef === null || inputRef === void 0 ? void 0 : (_inputRef$current = inputRef.current) === null || _inputRef$current === void 0 ? void 0 : _inputRef$current.selectionStart) || null);\n      };\n\n      document.addEventListener(\"click\", onDocClick);\n      document.addEventListener(\"keyup\", onKeyup);\n      document.addEventListener(\"selectionchange\", onSelectionChange);\n      return () => {\n        document.removeEventListener(\"click\", onDocClick);\n        document.removeEventListener(\"keyup\", onKeyup);\n        document.removeEventListener(\"selectionchange\", onSelectionChange);\n      };\n    }\n  }, [onSubmit, setValue, device.desktop, velocity, enabled, focused, paused]);\n\n  const focusInput = () => {\n    if (!inputRef.current) return;\n    protectClick.current = true;\n    inputRef.current.focus();\n  };\n\n  const BORDER = 0.005;\n  const OUTER_WIDTH = 0.65;\n  const PADDING_X = 0.01;\n  const INNER_WIDTH = OUTER_WIDTH - PADDING_X * 2;\n  const textStyles = {\n    font: FONT_FILE,\n    anchorX: \"left\",\n    maxWidth: INNER_WIDTH,\n    textAlign: \"left\",\n    fontSize: 0.0385,\n    color: \"black\",\n    // outlineWidth: 0.00275,\n    // @ts-ignore\n    whiteSpace: \"nowrap\",\n    sdfGlyphSize: 16\n  };\n  const stringValue = inputType === \"password\" ? value.replace(/./g, \"â€¢\") : value;\n  const displayValue = cursorPos !== null && focused ? stringValue.substring(0, cursorPos) + \"|\" + stringValue.substring(cursorPos) : stringValue;\n  const percWidth = ((_textRef$current = textRef.current) === null || _textRef$current === void 0 ? void 0 : (_textRef$current$_tex = _textRef$current._textRenderInfo) === null || _textRef$current$_tex === void 0 ? void 0 : _textRef$current$_tex.blockBounds[2]) / INNER_WIDTH;\n  const percCursor = (cursorPos || 0) / displayValue.length;\n  const offsetX = Math.max(percCursor * percWidth - 1 + 0.1, 0) * OUTER_WIDTH;\n  return /*#__PURE__*/_jsxDEV(\"group\", _objectSpread(_objectSpread({\n    name: \"input\"\n  }, rest), {}, {\n    children: [/*#__PURE__*/_jsxDEV(Text, _objectSpread(_objectSpread({\n      ref: textRef\n    }, textStyles), {}, {\n      \"position-z\": 0.051,\n      \"position-x\": -INNER_WIDTH / 2 - offsetX,\n      clipRect: [-PADDING_X + offsetX, -Infinity, INNER_WIDTH + PADDING_X + offsetX, Infinity],\n      children: displayValue\n    }), void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 166,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Interactable, {\n      onClick: () => focusInput(),\n      children: /*#__PURE__*/_jsxDEV(RoundedBox, {\n        args: [0.7, 0.1, 0.1],\n        radius: 0.025,\n        smoothness: 4,\n        children: /*#__PURE__*/_jsxDEV(\"meshStandardMaterial\", {\n          color: \"white\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 182,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 181,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 180,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(RoundedBox, {\n      args: [0.7 + BORDER, 0.1 + BORDER, 0.1],\n      radius: 0.025,\n      smoothness: 4,\n      \"position-z\": -0.001,\n      children: /*#__PURE__*/_jsxDEV(animated.meshStandardMaterial, {\n        color: color\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 191,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 185,\n      columnNumber: 7\n    }, this)]\n  }), void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 165,\n    columnNumber: 5\n  }, this);\n}","map":{"version":3,"sources":["/Users/dub_ceo/Desktop/spacesvr-starter/src/ideas/Builder12/layers/communication/visual/components/TextInput.tsx"],"names":["RoundedBox","Text","useEffect","useRef","useState","animated","useSpring","Interactable","useEnvironment","usePlayer","Vector3","FONT_FILE","TextInput","props","value","setValue","onSubmit","enabled","inputType","persist","rest","paused","device","controls","velocity","inputRef","focused","setFocused","cursorPos","setCursorPos","protectClick","textRef","color","current","document","createElement","setAttribute","style","zIndex","opacity","fontSize","position","left","top","transform","addEventListener","selectionStart","body","appendChild","removeChild","undefined","set","lock","unlock","desktop","blur","onDocClick","focus","onKeyup","e","key","onSelectionChange","removeEventListener","focusInput","BORDER","OUTER_WIDTH","PADDING_X","INNER_WIDTH","textStyles","font","anchorX","maxWidth","textAlign","whiteSpace","sdfGlyphSize","stringValue","replace","displayValue","substring","percWidth","_textRenderInfo","blockBounds","percCursor","length","offsetX","Math","max","Infinity"],"mappings":"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","sourcesContent":["import { RoundedBox, Text } from \"@react-three/drei\";\nimport { GroupProps } from \"@react-three/fiber\";\nimport { useEffect, useRef, useState } from \"react\";\nimport { animated, useSpring } from \"react-spring/three\";\nimport { Interactable, useEnvironment, usePlayer } from \"spacesvr\";\nimport { Vector3 } from \"three\";\n\ntype TextProps = {\n  value: string;\n  setValue: (s: string) => void;\n  onSubmit?: () => void;\n  enabled?: boolean;\n  persist?: boolean;\n  inputType?: \"text\" | \"password\" | \"email\";\n} & GroupProps;\n\nconst FONT_FILE =\n  \"https://d27rt3a60hh1lx.cloudfront.net/fonts/Quicksand_Bold.otf\";\n\nexport default function TextInput(props: TextProps) {\n  const {\n    value,\n    setValue,\n    onSubmit,\n    enabled = true,\n    inputType = \"text\",\n    persist,\n    ...rest\n  } = props;\n\n  const { paused, device } = useEnvironment();\n  const { controls, velocity } = usePlayer();\n  const inputRef = useRef<HTMLInputElement>();\n  const [focused, setFocused] = useState(false);\n  const [cursorPos, setCursorPos] = useState<number | null>(null);\n  const protectClick = useRef(false); // used to click off of the input to blur\n  const textRef = useRef<any>();\n\n  const { color } = useSpring({ color: focused ? \"#000\" : \"#828282\" });\n\n  useEffect(() => {\n    if (!inputRef.current && (persist || enabled)) {\n      inputRef.current = document.createElement(\"input\");\n      inputRef.current.setAttribute(\"type\", inputType);\n      inputRef.current.style.zIndex = \"-99\";\n      inputRef.current.style.opacity = \"0\";\n      inputRef.current.style.fontSize = \"16px\"; // this disables zoom on mobile\n      inputRef.current.style.position = \"absolute\";\n      inputRef.current.style.left = \"50%\";\n      inputRef.current.style.top = \"0\";\n      inputRef.current.style.transform = \"translate(-50%, 0%)\";\n\n      inputRef.current.addEventListener(\"focus\", () => setFocused(true));\n      inputRef.current.addEventListener(\"blur\", () => setFocused(false));\n\n      setCursorPos(inputRef.current.selectionStart);\n      inputRef.current.value = value;\n\n      document.body.appendChild(inputRef.current);\n\n      return () => {\n        if (inputRef.current) {\n          document.body.removeChild(inputRef.current);\n          inputRef.current = undefined;\n          setFocused(false);\n        }\n      };\n    }\n  }, [persist, enabled, inputType]);\n\n  useEffect(() => {\n    // persist inputs will be there while not enabled, so make sure side effects don't run\n    if (!enabled && persist) return;\n\n    if (focused) {\n      velocity.set(new Vector3(0, 0, 0));\n      controls.lock();\n    }\n\n    if (!focused) {\n      velocity.set(new Vector3(0, 0, 0));\n      controls.unlock();\n    }\n\n    if (inputRef.current && focused) {\n      if (!enabled || (paused && device.desktop)) {\n        inputRef.current.blur();\n      }\n    }\n\n    if (focused) {\n      const onDocClick = () => {\n        if (!protectClick.current && inputRef.current) {\n          inputRef.current.blur();\n        } else if (inputRef.current) {\n          inputRef.current.focus();\n        }\n        protectClick.current = false;\n      };\n\n      const onKeyup = (e: KeyboardEvent) => {\n        if (!focused || !inputRef.current) return;\n        if (onSubmit && e.key === \"Enter\") {\n          onSubmit();\n        }\n        setCursorPos(inputRef.current.selectionStart);\n        setValue(inputRef.current.value);\n      };\n\n      const onSelectionChange = () =>\n        setCursorPos(inputRef?.current?.selectionStart || null);\n\n      document.addEventListener(\"click\", onDocClick);\n      document.addEventListener(\"keyup\", onKeyup);\n      document.addEventListener(\"selectionchange\", onSelectionChange);\n\n      return () => {\n        document.removeEventListener(\"click\", onDocClick);\n        document.removeEventListener(\"keyup\", onKeyup);\n        document.removeEventListener(\"selectionchange\", onSelectionChange);\n      };\n    }\n  }, [onSubmit, setValue, device.desktop, velocity, enabled, focused, paused]);\n\n  const focusInput = () => {\n    if (!inputRef.current) return;\n    protectClick.current = true;\n    inputRef.current.focus();\n  };\n\n  const BORDER = 0.005;\n  const OUTER_WIDTH = 0.65;\n  const PADDING_X = 0.01;\n  const INNER_WIDTH = OUTER_WIDTH - PADDING_X * 2;\n\n  const textStyles: Partial<typeof Text.defaultProps> = {\n    font: FONT_FILE,\n    anchorX: \"left\",\n    maxWidth: INNER_WIDTH,\n    textAlign: \"left\",\n    fontSize: 0.0385,\n    color: \"black\",\n    // outlineWidth: 0.00275,\n    // @ts-ignore\n    whiteSpace: \"nowrap\",\n    sdfGlyphSize: 16,\n  };\n\n  const stringValue =\n    inputType === \"password\" ? value.replace(/./g, \"â€¢\") : value;\n\n  const displayValue =\n    cursorPos !== null && focused\n      ? stringValue.substring(0, cursorPos) +\n        \"|\" +\n        stringValue.substring(cursorPos)\n      : stringValue;\n\n  const percWidth =\n    textRef.current?._textRenderInfo?.blockBounds[2] / INNER_WIDTH;\n  const percCursor = (cursorPos || 0) / displayValue.length;\n  const offsetX = Math.max(percCursor * percWidth - 1 + 0.1, 0) * OUTER_WIDTH;\n\n  return (\n    <group name=\"input\" {...rest}>\n      <Text\n        ref={textRef}\n        {...textStyles}\n        position-z={0.051}\n        position-x={-INNER_WIDTH / 2 - offsetX}\n        clipRect={[\n          -PADDING_X + offsetX,\n          -Infinity,\n          INNER_WIDTH + PADDING_X + offsetX,\n          Infinity,\n        ]}\n      >\n        {displayValue}\n      </Text>\n      <Interactable onClick={() => focusInput()}>\n        <RoundedBox args={[0.7, 0.1, 0.1]} radius={0.025} smoothness={4}>\n          <meshStandardMaterial color=\"white\" />\n        </RoundedBox>\n      </Interactable>\n      <RoundedBox\n        args={[0.7 + BORDER, 0.1 + BORDER, 0.1]}\n        radius={0.025}\n        smoothness={4}\n        position-z={-0.001}\n      >\n        <animated.meshStandardMaterial color={color} />\n      </RoundedBox>\n    </group>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}