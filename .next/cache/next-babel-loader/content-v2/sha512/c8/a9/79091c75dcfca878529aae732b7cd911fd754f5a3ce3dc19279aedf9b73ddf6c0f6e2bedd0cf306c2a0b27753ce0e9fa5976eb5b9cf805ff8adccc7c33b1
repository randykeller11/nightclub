{"ast":null,"code":"import _defineProperty from \"/Users/dub_ceo/Desktop/spacesvr-starter/node_modules/next/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport _objectWithoutProperties from \"/Users/dub_ceo/Desktop/spacesvr-starter/node_modules/next/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\n\nvar _jsxFileName = \"/Users/dub_ceo/Desktop/spacesvr-starter/src/ideas/Builder12/layers/basis/visual/VisualIdea.tsx\",\n    _s = $RefreshSig$();\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { useMemo } from \"react\";\nimport { useFrame } from \"@react-three/fiber\";\nimport { DoubleSide, Color, Uniform, MeshStandardMaterial } from \"three\";\nimport { useLimiter } from \"spacesvr\";\nimport { Idea } from \"../classes/idea\";\nimport { frag, vert, vertHead } from \"./shaders/idea\";\n\n/**\n * Pure Idea\n *\n *\n * @param props\n * @constructor\n */\nexport function VisualIdea(props) {\n  _s();\n\n  var _props$size = props.size,\n      size = _props$size === void 0 ? 1 : _props$size,\n      idea = props.idea,\n      _props$mediation = props.mediation,\n      mediation = _props$mediation === void 0 ? 0 : _props$mediation,\n      _props$specificity = props.specificity,\n      specificity = _props$specificity === void 0 ? 0 : _props$specificity,\n      _props$utility = props.utility,\n      utility = _props$utility === void 0 ? 0.5 : _props$utility,\n      restProps = _objectWithoutProperties(props, [\"size\", \"idea\", \"mediation\", \"specificity\", \"utility\"]);\n\n  var HEX = idea ? idea.getHex() : new Idea().setFromCreation(mediation, specificity, utility).getHex();\n  var seed = useMemo(function () {\n    return Math.random();\n  }, []);\n  var color = useMemo(function () {\n    return new Color(HEX);\n  }, [HEX]);\n  var RADIUS = 4;\n  var NOISE_AMPLITUDE = 0.82;\n  var NOISE_FREQ = 0.154;\n  var SIZE = Array.isArray(size) ? [size[0] * 0.2, size[1] * 0.2, size[2] * 0.2] : [size * 0.2, size * 0.2, size * 0.2];\n  var mat = useMemo(function () {\n    var m = new MeshStandardMaterial({\n      metalness: 0.18,\n      roughness: 0.49,\n      envMapIntensity: 0.66,\n      side: DoubleSide\n    });\n\n    m.onBeforeCompile = function (shader) {\n      shader.uniforms.radius = new Uniform(RADIUS);\n      shader.uniforms.time = new Uniform(0);\n      shader.uniforms.color = new Uniform(color);\n      shader.uniforms.radiusVariationAmplitude = new Uniform(NOISE_AMPLITUDE);\n      shader.uniforms.radiusNoiseFrequency = new Uniform(NOISE_FREQ);\n      var uniforms = \"\\n        uniform float radius;\\n        uniform float time;\\n        uniform vec3 color;\\n        uniform float radiusVariationAmplitude;\\n        uniform float radiusNoiseFrequency;\\n      \";\n      shader.vertexShader = uniforms + vertHead + shader.vertexShader.replace(\"#include <begin_vertex>\", vert);\n      shader.fragmentShader = uniforms + shader.fragmentShader.replace(\"#include <dithering_fragment>\", frag);\n      m.userData.shader = shader;\n    };\n\n    return m;\n  }, [RADIUS, color, NOISE_AMPLITUDE, NOISE_FREQ, frag, vert]);\n  var limiter = useLimiter(50);\n  useFrame(function (_ref) {\n    var _mat$userData;\n\n    var clock = _ref.clock;\n    if (!(mat !== null && mat !== void 0 && (_mat$userData = mat.userData) !== null && _mat$userData !== void 0 && _mat$userData.shader) || !limiter.isReady(clock)) return;\n    mat.userData.shader.uniforms.time.value = clock.getElapsedTime() / 6 + seed * 1000;\n  });\n  return /*#__PURE__*/_jsxDEV(\"group\", _objectSpread(_objectSpread({}, restProps), {}, {\n    name: \"idea\",\n    children: /*#__PURE__*/_jsxDEV(\"group\", {\n      scale: SIZE,\n      children: /*#__PURE__*/_jsxDEV(\"mesh\", {\n        material: mat,\n        children: /*#__PURE__*/_jsxDEV(\"sphereBufferGeometry\", {\n          args: [RADIUS, 64, 32]\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 7\n    }, this)\n  }), void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 91,\n    columnNumber: 5\n  }, this);\n}\n\n_s(VisualIdea, \"hYOyrIxcLFrh0aV5PAd0WPUNulY=\", false, function () {\n  return [useLimiter, useFrame];\n});\n\n_c = VisualIdea;\n\nvar _c;\n\n$RefreshReg$(_c, \"VisualIdea\");","map":{"version":3,"sources":["/Users/dub_ceo/Desktop/spacesvr-starter/src/ideas/Builder12/layers/basis/visual/VisualIdea.tsx"],"names":["useMemo","useFrame","DoubleSide","Color","Uniform","MeshStandardMaterial","useLimiter","Idea","frag","vert","vertHead","VisualIdea","props","size","idea","mediation","specificity","utility","restProps","HEX","getHex","setFromCreation","seed","Math","random","color","RADIUS","NOISE_AMPLITUDE","NOISE_FREQ","SIZE","Array","isArray","mat","m","metalness","roughness","envMapIntensity","side","onBeforeCompile","shader","uniforms","radius","time","radiusVariationAmplitude","radiusNoiseFrequency","vertexShader","replace","fragmentShader","userData","limiter","clock","isReady","value","getElapsedTime"],"mappings":"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","sourcesContent":["import { useMemo } from \"react\";\nimport { GroupProps, useFrame } from \"@react-three/fiber\";\nimport { DoubleSide, Color, Uniform, MeshStandardMaterial } from \"three\";\nimport { useLimiter } from \"spacesvr\";\nimport { Idea } from \"../classes/idea\";\nimport { frag, vert, vertHead } from \"./shaders/idea\";\n\ntype Props = {\n  size?: number | [number, number, number];\n  idea?: Idea;\n} & Partial<Idea> &\n  GroupProps;\n\n/**\n * Pure Idea\n *\n *\n * @param props\n * @constructor\n */\nexport function VisualIdea(props: Props) {\n  const {\n    size = 1,\n    idea,\n    mediation = 0,\n    specificity = 0,\n    utility = 0.5,\n    ...restProps\n  } = props;\n\n\n  const HEX = idea\n    ? idea.getHex()\n    : new Idea().setFromCreation(mediation, specificity, utility).getHex();\n  const seed = useMemo(() => Math.random(), []);\n  const color = useMemo(() => new Color(HEX), [HEX]);\n  const RADIUS = 4;\n  const NOISE_AMPLITUDE = 0.82;\n  const NOISE_FREQ = 0.154;\n  const SIZE: [number, number, number] = Array.isArray(size)\n    ? [size[0] * 0.2, size[1] * 0.2, size[2] * 0.2]\n    : [size * 0.2, size * 0.2, size * 0.2];\n\n  const mat = useMemo(() => {\n    const m = new MeshStandardMaterial({\n      metalness: 0.18,\n      roughness: 0.49,\n      envMapIntensity: 0.66,\n      side: DoubleSide,\n    });\n\n    m.onBeforeCompile = function (shader) {\n      shader.uniforms.radius = new Uniform(RADIUS);\n      shader.uniforms.time = new Uniform(0);\n      shader.uniforms.color = new Uniform(color);\n      shader.uniforms.radiusVariationAmplitude = new Uniform(NOISE_AMPLITUDE);\n      shader.uniforms.radiusNoiseFrequency = new Uniform(NOISE_FREQ);\n\n      const uniforms = `\n        uniform float radius;\n        uniform float time;\n        uniform vec3 color;\n        uniform float radiusVariationAmplitude;\n        uniform float radiusNoiseFrequency;\n      `;\n\n      shader.vertexShader =\n        uniforms +\n        vertHead +\n        shader.vertexShader.replace(\"#include <begin_vertex>\", vert);\n\n      shader.fragmentShader =\n        uniforms +\n        shader.fragmentShader.replace(\"#include <dithering_fragment>\", frag);\n\n      m.userData.shader = shader;\n    };\n\n    return m;\n  }, [RADIUS, color, NOISE_AMPLITUDE, NOISE_FREQ, frag, vert]);\n\n  const limiter = useLimiter(50);\n  useFrame(({ clock }) => {\n    if (!mat?.userData?.shader || !limiter.isReady(clock)) return;\n\n    mat.userData.shader.uniforms.time.value =\n      clock.getElapsedTime() / 6 + seed * 1000;\n  });\n\n  return (\n    <group {...restProps} name=\"idea\">\n      <group scale={SIZE}>\n        <mesh material={mat}>\n          <sphereBufferGeometry args={[RADIUS, 64, 32]} />\n        </mesh>\n      </group>\n    </group>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}