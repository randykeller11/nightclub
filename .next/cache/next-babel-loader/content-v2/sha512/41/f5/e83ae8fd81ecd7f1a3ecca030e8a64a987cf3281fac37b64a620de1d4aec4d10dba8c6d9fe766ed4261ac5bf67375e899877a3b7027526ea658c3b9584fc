{"ast":null,"code":"import _classCallCheck from \"/Users/dub_ceo/Desktop/spacesvr-starter/node_modules/next/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/dub_ceo/Desktop/spacesvr-starter/node_modules/next/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _defineProperty from \"/Users/dub_ceo/Desktop/spacesvr-starter/node_modules/next/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n// @ts-ignore\nimport { Idea } from \"./idea\";\n/**\n * an world is a set of ideas\n */\n\nexport var World = /*#__PURE__*/function () {\n  function World() {\n    _classCallCheck(this, World);\n\n    _defineProperty(this, \"id\", void 0);\n\n    _defineProperty(this, \"userId\", void 0);\n\n    _defineProperty(this, \"name\", void 0);\n\n    _defineProperty(this, \"slug\", void 0);\n\n    _defineProperty(this, \"predecessor\", void 0);\n\n    _defineProperty(this, \"dataUrl\", void 0);\n\n    _defineProperty(this, \"upToDate\", void 0);\n\n    return this;\n  }\n\n  _createClass(World, [{\n    key: \"setFromBackendWorld\",\n    value: function setFromBackendWorld(backendWorld) {\n      this.id = backendWorld.id;\n      this.userId = backendWorld.user_id;\n      this.name = backendWorld.name;\n      this.slug = backendWorld.slug;\n      this.predecessor = backendWorld.predecessor;\n      this.dataUrl = backendWorld.data_url;\n      this.upToDate = backendWorld.up_to_date;\n      return this;\n    }\n  }, {\n    key: \"getIdea\",\n    value: function getIdea() {\n      return new Idea().setFromCreation(hashStringToRange(this.slug || this.dataUrl || \"come on son\", 3), hashStringToRange(this.id), 0.96);\n    }\n  }, {\n    key: \"getHex\",\n    value: function getHex() {\n      return this.getIdea().getHex();\n    }\n  }]);\n\n  return World;\n}();\nvar AVG_CHAR_VAL = 100; // each char is roughly 100, so loop every ~50 chars\n\nvar hashStringToRange = function hashStringToRange(str) {\n  var loop = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 8;\n  var count = 0;\n\n  for (var i = 0; i < str.length; i++) {\n    count += str.substr(i, 1).charCodeAt(0);\n  }\n\n  var scaledLoop = loop * AVG_CHAR_VAL;\n  return count % scaledLoop / scaledLoop;\n};","map":{"version":3,"sources":["/Users/dub_ceo/Desktop/spacesvr-starter/src/ideas/Builder12/layers/basis/classes/world.ts"],"names":["Idea","World","backendWorld","id","userId","user_id","name","slug","predecessor","dataUrl","data_url","upToDate","up_to_date","setFromCreation","hashStringToRange","getIdea","getHex","AVG_CHAR_VAL","str","loop","count","i","length","substr","charCodeAt","scaledLoop"],"mappings":";;;AAAA;AAGA,SAASA,IAAT,QAAqB,QAArB;AAEA;AACA;AACA;;AACA,WAAaC,KAAb;AASE,mBAAc;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AACZ,WAAO,IAAP;AACD;;AAXH;AAAA;AAAA,wCAasBC,YAbtB,EAakD;AAC9C,WAAKC,EAAL,GAAUD,YAAY,CAACC,EAAvB;AACA,WAAKC,MAAL,GAAcF,YAAY,CAACG,OAA3B;AACA,WAAKC,IAAL,GAAYJ,YAAY,CAACI,IAAzB;AACA,WAAKC,IAAL,GAAYL,YAAY,CAACK,IAAzB;AACA,WAAKC,WAAL,GAAmBN,YAAY,CAACM,WAAhC;AACA,WAAKC,OAAL,GAAeP,YAAY,CAACQ,QAA5B;AACA,WAAKC,QAAL,GAAgBT,YAAY,CAACU,UAA7B;AAEA,aAAO,IAAP;AACD;AAvBH;AAAA;AAAA,8BAyBkB;AACd,aAAO,IAAIZ,IAAJ,GAAWa,eAAX,CACLC,iBAAiB,CAAC,KAAKP,IAAL,IAAa,KAAKE,OAAlB,IAA6B,aAA9B,EAA6C,CAA7C,CADZ,EAELK,iBAAiB,CAAC,KAAKX,EAAN,CAFZ,EAGL,IAHK,CAAP;AAKD;AA/BH;AAAA;AAAA,6BAiCmB;AACf,aAAO,KAAKY,OAAL,GAAeC,MAAf,EAAP;AACD;AAnCH;;AAAA;AAAA;AAsCA,IAAMC,YAAY,GAAG,GAArB,C,CAA0B;;AAE1B,IAAMH,iBAAiB,GAAG,SAApBA,iBAAoB,CAACI,GAAD,EAAmC;AAAA,MAArBC,IAAqB,uEAAd,CAAc;AAC3D,MAAIC,KAAK,GAAG,CAAZ;;AACA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,GAAG,CAACI,MAAxB,EAAgCD,CAAC,EAAjC,EAAqC;AACnCD,IAAAA,KAAK,IAAIF,GAAG,CAACK,MAAJ,CAAWF,CAAX,EAAc,CAAd,EAAiBG,UAAjB,CAA4B,CAA5B,CAAT;AACD;;AACD,MAAMC,UAAU,GAAGN,IAAI,GAAGF,YAA1B;AACA,SAAQG,KAAK,GAAGK,UAAT,GAAuBA,UAA9B;AACD,CAPD","sourcesContent":["// @ts-ignore\nimport * as culori from \"culori\";\nimport { BackendWorld } from \"../types/world\";\nimport { Idea } from \"./idea\";\n\n/**\n * an world is a set of ideas\n */\nexport class World {\n  id: string;\n  userId: number;\n  name: string;\n  slug?: string;\n  predecessor?: string;\n  dataUrl?: string;\n  upToDate: boolean;\n\n  constructor() {\n    return this;\n  }\n\n  setFromBackendWorld(backendWorld: BackendWorld) {\n    this.id = backendWorld.id;\n    this.userId = backendWorld.user_id;\n    this.name = backendWorld.name;\n    this.slug = backendWorld.slug;\n    this.predecessor = backendWorld.predecessor;\n    this.dataUrl = backendWorld.data_url;\n    this.upToDate = backendWorld.up_to_date;\n\n    return this;\n  }\n\n  getIdea(): Idea {\n    return new Idea().setFromCreation(\n      hashStringToRange(this.slug || this.dataUrl || \"come on son\", 3),\n      hashStringToRange(this.id),\n      0.96\n    );\n  }\n\n  getHex(): string {\n    return this.getIdea().getHex();\n  }\n}\n\nconst AVG_CHAR_VAL = 100; // each char is roughly 100, so loop every ~50 chars\n\nconst hashStringToRange = (str: string, loop = 8): number => {\n  let count = 0;\n  for (let i = 0; i < str.length; i++) {\n    count += str.substr(i, 1).charCodeAt(0);\n  }\n  const scaledLoop = loop * AVG_CHAR_VAL;\n  return (count % scaledLoop) / scaledLoop;\n};\n"]},"metadata":{},"sourceType":"module"}