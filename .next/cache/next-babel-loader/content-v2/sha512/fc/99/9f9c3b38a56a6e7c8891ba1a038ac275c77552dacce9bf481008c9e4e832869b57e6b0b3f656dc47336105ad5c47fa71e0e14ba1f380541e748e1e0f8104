{"ast":null,"code":"import { Idea } from \"../../basis\";\nexport function getIdeaFromDecision(decision) {\n  var len = decision.name.length;\n  return new Idea().setFromCreation(hashStringToRange(decision.name, 10), (1 - (len === 0 ? 1 : 1 / len)) * 0.9, decision.utility || 1 - 1 / decision.name.length);\n}\nexport function getIdeaFromInteraction(interaction) {\n  var len = interaction.text.length;\n  return new Idea().setFromCreation(hashStringToRange(interaction.text), (1 - (len === 0 ? 1 : 1 / len)) * 0.5, interaction.decisions ? 0.75 : 0.5);\n}\nvar AVG_CHAR_VAL = 100; // each char is roughly 100, so loop every ~50 chars\n\nvar hashStringToRange = function hashStringToRange(str) {\n  var loop = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 20;\n  var count = 0;\n\n  for (var i = 0; i < str.length; i++) {\n    count += str.substr(i, 1).charCodeAt(0);\n  }\n\n  var scaledLoop = loop * AVG_CHAR_VAL;\n  return count % scaledLoop / scaledLoop;\n};","map":{"version":3,"sources":["/Users/dub_ceo/Desktop/spacesvr-starter/src/ideas/Builder12/layers/communication/utils/helper.ts"],"names":["Idea","getIdeaFromDecision","decision","len","name","length","setFromCreation","hashStringToRange","utility","getIdeaFromInteraction","interaction","text","decisions","AVG_CHAR_VAL","str","loop","count","i","substr","charCodeAt","scaledLoop"],"mappings":"AACA,SAASA,IAAT,QAAqB,aAArB;AAEA,OAAO,SAASC,mBAAT,CAA6BC,QAA7B,EAAuD;AAC5D,MAAMC,GAAG,GAAGD,QAAQ,CAACE,IAAT,CAAcC,MAA1B;AAEA,SAAO,IAAIL,IAAJ,GAAWM,eAAX,CACLC,iBAAiB,CAACL,QAAQ,CAACE,IAAV,EAAgB,EAAhB,CADZ,EAEL,CAAC,KAAKD,GAAG,KAAK,CAAR,GAAY,CAAZ,GAAgB,IAAIA,GAAzB,CAAD,IAAkC,GAF7B,EAGLD,QAAQ,CAACM,OAAT,IAAoB,IAAI,IAAIN,QAAQ,CAACE,IAAT,CAAcC,MAHrC,CAAP;AAKD;AAED,OAAO,SAASI,sBAAT,CAAgCC,WAAhC,EAAgE;AACrE,MAAMP,GAAG,GAAGO,WAAW,CAACC,IAAZ,CAAiBN,MAA7B;AAEA,SAAO,IAAIL,IAAJ,GAAWM,eAAX,CACLC,iBAAiB,CAACG,WAAW,CAACC,IAAb,CADZ,EAEL,CAAC,KAAKR,GAAG,KAAK,CAAR,GAAY,CAAZ,GAAgB,IAAIA,GAAzB,CAAD,IAAkC,GAF7B,EAGLO,WAAW,CAACE,SAAZ,GAAwB,IAAxB,GAA+B,GAH1B,CAAP;AAKD;AAED,IAAMC,YAAY,GAAG,GAArB,C,CAA0B;;AAE1B,IAAMN,iBAAiB,GAAG,SAApBA,iBAAoB,CAACO,GAAD,EAAoC;AAAA,MAAtBC,IAAsB,uEAAf,EAAe;AAC5D,MAAIC,KAAK,GAAG,CAAZ;;AACA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,GAAG,CAACT,MAAxB,EAAgCY,CAAC,EAAjC,EAAqC;AACnCD,IAAAA,KAAK,IAAIF,GAAG,CAACI,MAAJ,CAAWD,CAAX,EAAc,CAAd,EAAiBE,UAAjB,CAA4B,CAA5B,CAAT;AACD;;AACD,MAAMC,UAAU,GAAGL,IAAI,GAAGF,YAA1B;AACA,SAAQG,KAAK,GAAGI,UAAT,GAAuBA,UAA9B;AACD,CAPD","sourcesContent":["import { Decision, Interaction } from \"../index\";\nimport { Idea } from \"../../basis\";\n\nexport function getIdeaFromDecision(decision: Decision): Idea {\n  const len = decision.name.length;\n\n  return new Idea().setFromCreation(\n    hashStringToRange(decision.name, 10),\n    (1 - (len === 0 ? 1 : 1 / len)) * 0.9,\n    decision.utility || 1 - 1 / decision.name.length\n  );\n}\n\nexport function getIdeaFromInteraction(interaction: Interaction): Idea {\n  const len = interaction.text.length;\n\n  return new Idea().setFromCreation(\n    hashStringToRange(interaction.text),\n    (1 - (len === 0 ? 1 : 1 / len)) * 0.5,\n    interaction.decisions ? 0.75 : 0.5\n  );\n}\n\nconst AVG_CHAR_VAL = 100; // each char is roughly 100, so loop every ~50 chars\n\nconst hashStringToRange = (str: string, loop = 20): number => {\n  let count = 0;\n  for (let i = 0; i < str.length; i++) {\n    count += str.substr(i, 1).charCodeAt(0);\n  }\n  const scaledLoop = loop * AVG_CHAR_VAL;\n  return (count % scaledLoop) / scaledLoop;\n};\n"]},"metadata":{},"sourceType":"module"}