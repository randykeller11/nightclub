{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/dub_ceo/Desktop/spacesvr-starter/src/ideas/Builder12/layers/basis/visual/VisualWorld.tsx\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport { useEffect, useMemo } from \"react\";\nimport { useFrame } from \"@react-three/fiber\";\nimport { DoubleSide, Color, ShaderMaterial } from \"three\";\nimport { useLimiter } from \"spacesvr\";\nimport { frag, vert } from \"./shaders/world\";\n\n/**\n * Pure Idea\n *\n *\n *\n * @param props\n * @constructor\n */\nexport function VisualWorld(props) {\n  const {\n    size = 1,\n    world\n  } = props,\n        restProps = _objectWithoutProperties(props, [\"size\", \"world\"]);\n\n  const limiter = useLimiter(50);\n  const SEED = useMemo(() => Math.random(), []);\n  const COLOR = useMemo(() => new Color(), []);\n  const RADIUS = 4;\n  const NOISE_AMPLITUDE = 0.82;\n  const NOISE_FREQ = 0.154;\n  const HEX = (world === null || world === void 0 ? void 0 : world.getHex()) || \"#808080\";\n  const SIZE = typeof size === \"number\" ? [size * 0.2, size * 0.2, size * 0.2] : [size[0] * 0.2, size[1] * 0.2, size[2] * 0.2];\n  useFrame(({\n    clock\n  }) => {\n    if (!mat || !limiter.isReady(clock)) return;\n    mat.uniforms[\"time\"].value = clock.getElapsedTime() / 6 + SEED * 1000;\n  });\n  useEffect(() => {\n    COLOR.set(HEX);\n  }, [HEX]);\n  const mat = useMemo(() => new ShaderMaterial({\n    uniforms: {\n      radius: {\n        value: RADIUS\n      },\n      time: {\n        value: 0\n      },\n      color: {\n        value: COLOR\n      },\n      radiusVariationAmplitude: {\n        value: NOISE_AMPLITUDE\n      },\n      radiusNoiseFrequency: {\n        value: NOISE_FREQ\n      }\n    },\n    side: DoubleSide,\n    vertexShader: vert,\n    fragmentShader: frag\n  }), [vert, frag]);\n  return /*#__PURE__*/_jsxDEV(\"group\", _objectSpread(_objectSpread({}, restProps), {}, {\n    children: /*#__PURE__*/_jsxDEV(\"group\", {\n      scale: SIZE,\n      children: /*#__PURE__*/_jsxDEV(\"mesh\", {\n        material: mat,\n        children: /*#__PURE__*/_jsxDEV(\"sphereBufferGeometry\", {\n          args: [RADIUS, 64, 32]\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this)\n  }), void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 65,\n    columnNumber: 5\n  }, this);\n}","map":{"version":3,"sources":["/Users/dub_ceo/Desktop/spacesvr-starter/src/ideas/Builder12/layers/basis/visual/VisualWorld.tsx"],"names":["useEffect","useMemo","useFrame","DoubleSide","Color","ShaderMaterial","useLimiter","frag","vert","VisualWorld","props","size","world","restProps","limiter","SEED","Math","random","COLOR","RADIUS","NOISE_AMPLITUDE","NOISE_FREQ","HEX","getHex","SIZE","clock","mat","isReady","uniforms","value","getElapsedTime","set","radius","time","color","radiusVariationAmplitude","radiusNoiseFrequency","side","vertexShader","fragmentShader"],"mappings":";;;;;;;;;;;;;AAAA,SAASA,SAAT,EAAoBC,OAApB,QAAmC,OAAnC;AACA,SAAqBC,QAArB,QAAqC,oBAArC;AACA,SAASC,UAAT,EAAqBC,KAArB,EAA4BC,cAA5B,QAAkD,OAAlD;AACA,SAASC,UAAT,QAA2B,UAA3B;AACA,SAASC,IAAT,EAAeC,IAAf,QAA2B,iBAA3B;;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,WAAT,CAAqBC,KAArB,EAAmC;AACxC,QAAM;AAAEC,IAAAA,IAAI,GAAG,CAAT;AAAYC,IAAAA;AAAZ,MAAoCF,KAA1C;AAAA,QAA4BG,SAA5B,4BAA0CH,KAA1C;;AAEA,QAAMI,OAAO,GAAGR,UAAU,CAAC,EAAD,CAA1B;AAEA,QAAMS,IAAI,GAAGd,OAAO,CAAC,MAAMe,IAAI,CAACC,MAAL,EAAP,EAAsB,EAAtB,CAApB;AACA,QAAMC,KAAK,GAAGjB,OAAO,CAAC,MAAM,IAAIG,KAAJ,EAAP,EAAoB,EAApB,CAArB;AACA,QAAMe,MAAM,GAAG,CAAf;AACA,QAAMC,eAAe,GAAG,IAAxB;AACA,QAAMC,UAAU,GAAG,KAAnB;AACA,QAAMC,GAAG,GAAG,CAAAV,KAAK,SAAL,IAAAA,KAAK,WAAL,YAAAA,KAAK,CAAEW,MAAP,OAAmB,SAA/B;AACA,QAAMC,IAA8B,GAClC,OAAOb,IAAP,KAAgB,QAAhB,GACI,CAACA,IAAI,GAAG,GAAR,EAAaA,IAAI,GAAG,GAApB,EAAyBA,IAAI,GAAG,GAAhC,CADJ,GAEI,CAACA,IAAI,CAAC,CAAD,CAAJ,GAAU,GAAX,EAAgBA,IAAI,CAAC,CAAD,CAAJ,GAAU,GAA1B,EAA+BA,IAAI,CAAC,CAAD,CAAJ,GAAU,GAAzC,CAHN;AAKAT,EAAAA,QAAQ,CAAC,CAAC;AAAEuB,IAAAA;AAAF,GAAD,KAAe;AACtB,QAAI,CAACC,GAAD,IAAQ,CAACZ,OAAO,CAACa,OAAR,CAAgBF,KAAhB,CAAb,EAAqC;AAErCC,IAAAA,GAAG,CAACE,QAAJ,CAAa,MAAb,EAAqBC,KAArB,GAA6BJ,KAAK,CAACK,cAAN,KAAyB,CAAzB,GAA6Bf,IAAI,GAAG,IAAjE;AACD,GAJO,CAAR;AAMAf,EAAAA,SAAS,CAAC,MAAM;AACdkB,IAAAA,KAAK,CAACa,GAAN,CAAUT,GAAV;AACD,GAFQ,EAEN,CAACA,GAAD,CAFM,CAAT;AAIA,QAAMI,GAAG,GAAGzB,OAAO,CACjB,MACE,IAAII,cAAJ,CAAmB;AACjBuB,IAAAA,QAAQ,EAAE;AACRI,MAAAA,MAAM,EAAE;AAAEH,QAAAA,KAAK,EAAEV;AAAT,OADA;AAERc,MAAAA,IAAI,EAAE;AAAEJ,QAAAA,KAAK,EAAE;AAAT,OAFE;AAGRK,MAAAA,KAAK,EAAE;AAAEL,QAAAA,KAAK,EAAEX;AAAT,OAHC;AAIRiB,MAAAA,wBAAwB,EAAE;AAAEN,QAAAA,KAAK,EAAET;AAAT,OAJlB;AAKRgB,MAAAA,oBAAoB,EAAE;AAAEP,QAAAA,KAAK,EAAER;AAAT;AALd,KADO;AAQjBgB,IAAAA,IAAI,EAAElC,UARW;AASjBmC,IAAAA,YAAY,EAAE9B,IATG;AAUjB+B,IAAAA,cAAc,EAAEhC;AAVC,GAAnB,CAFe,EAcjB,CAACC,IAAD,EAAOD,IAAP,CAdiB,CAAnB;AAiBA,sBACE,iDAAWM,SAAX;AAAA,2BACE;AAAO,MAAA,KAAK,EAAEW,IAAd;AAAA,6BACE;AAAM,QAAA,QAAQ,EAAEE,GAAhB;AAAA,+BACE;AAAsB,UAAA,IAAI,EAAE,CAACP,MAAD,EAAS,EAAT,EAAa,EAAb;AAA5B;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AASD","sourcesContent":["import { useEffect, useMemo } from \"react\";\nimport { GroupProps, useFrame } from \"@react-three/fiber\";\nimport { DoubleSide, Color, ShaderMaterial } from \"three\";\nimport { useLimiter } from \"spacesvr\";\nimport { frag, vert } from \"./shaders/world\";\nimport { World } from \"../classes/world\";\n\ntype Props = {\n  size?: number | [number, number, number];\n  world?: World;\n} & GroupProps;\n\n/**\n * Pure Idea\n *\n *\n *\n * @param props\n * @constructor\n */\nexport function VisualWorld(props: Props) {\n  const { size = 1, world, ...restProps } = props;\n\n  const limiter = useLimiter(50);\n\n  const SEED = useMemo(() => Math.random(), []);\n  const COLOR = useMemo(() => new Color(), []);\n  const RADIUS = 4;\n  const NOISE_AMPLITUDE = 0.82;\n  const NOISE_FREQ = 0.154;\n  const HEX = world?.getHex() || \"#808080\";\n  const SIZE: [number, number, number] =\n    typeof size === \"number\"\n      ? [size * 0.2, size * 0.2, size * 0.2]\n      : [size[0] * 0.2, size[1] * 0.2, size[2] * 0.2];\n\n  useFrame(({ clock }) => {\n    if (!mat || !limiter.isReady(clock)) return;\n\n    mat.uniforms[\"time\"].value = clock.getElapsedTime() / 6 + SEED * 1000;\n  });\n\n  useEffect(() => {\n    COLOR.set(HEX);\n  }, [HEX]);\n\n  const mat = useMemo(\n    () =>\n      new ShaderMaterial({\n        uniforms: {\n          radius: { value: RADIUS },\n          time: { value: 0 },\n          color: { value: COLOR },\n          radiusVariationAmplitude: { value: NOISE_AMPLITUDE },\n          radiusNoiseFrequency: { value: NOISE_FREQ },\n        },\n        side: DoubleSide,\n        vertexShader: vert,\n        fragmentShader: frag,\n      }),\n    [vert, frag]\n  );\n\n  return (\n    <group {...restProps}>\n      <group scale={SIZE}>\n        <mesh material={mat}>\n          <sphereBufferGeometry args={[RADIUS, 64, 32]} />\n        </mesh>\n      </group>\n    </group>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}