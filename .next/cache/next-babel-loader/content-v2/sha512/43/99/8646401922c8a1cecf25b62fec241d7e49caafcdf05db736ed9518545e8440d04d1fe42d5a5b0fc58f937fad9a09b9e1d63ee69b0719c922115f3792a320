{"ast":null,"code":"export const vert = `\n    precision highp float;\n    uniform float radius;\n    uniform float time;\n    uniform vec3 color;\n    uniform float radiusVariationAmplitude;\n    uniform float radiusNoiseFrequency;\n    varying vec2 vUv;\n    varying vec3 vNormal;\n    \n    \n    // Description : Array and textureless GLSL 2D/3D/4D simplex\n    //               noise functions.\n    //      Author : Ian McEwan, Ashima Arts.\n    //  Maintainer : ijm\n    //     Lastmod : 20110822 (ijm)\n    //     License : Copyright (C) 2011 Ashima Arts. All rights reserved.\n    //               Distributed under the MIT License. See LICENSE file.\n    //               https://github.com/ashima/webgl-noise\n    //\n    \n    vec3 mod289(vec3 x) {\n      return x - floor(x * (1.0 / 289.0)) * 289.0;\n    }\n    \n    vec4 mod289(vec4 x) {\n      return x - floor(x * (1.0 / 289.0)) * 289.0;\n    }\n    \n    vec4 permute(vec4 x) {\n         return mod289(((x*34.0)+1.0)*x);\n    }\n    \n    vec4 taylorInvSqrt(vec4 r)\n    {\n      return 1.79284291400159 - 0.85373472095314 * r;\n    }\n    \n    float snoise(vec3 v)\n      {\n      const vec2  C = vec2(1.0/6.0, 1.0/3.0) ;\n      const vec4  D = vec4(0.0, 0.5, 1.0, 2.0);\n    \n    // First corner\n      vec3 i  = floor(v + dot(v, C.yyy) );\n      vec3 x0 =   v - i + dot(i, C.xxx) ;\n    \n    // Other corners\n      vec3 g = step(x0.yzx, x0.xyz);\n      vec3 l = 1.0 - g;\n      vec3 i1 = min( g.xyz, l.zxy );\n      vec3 i2 = max( g.xyz, l.zxy );\n    \n      //   x0 = x0 - 0.0 + 0.0 * C.xxx;\n      //   x1 = x0 - i1  + 1.0 * C.xxx;\n      //   x2 = x0 - i2  + 2.0 * C.xxx;\n      //   x3 = x0 - 1.0 + 3.0 * C.xxx;\n      vec3 x1 = x0 - i1 + C.xxx;\n      vec3 x2 = x0 - i2 + C.yyy; // 2.0*C.x = 1/3 = C.y\n      vec3 x3 = x0 - D.yyy;      // -1.0+3.0*C.x = -0.5 = -D.y\n    \n    // Permutations\n      i = mod289(i);\n      vec4 p = permute( permute( permute(\n                 i.z + vec4(0.0, i1.z, i2.z, 1.0 ))\n               + i.y + vec4(0.0, i1.y, i2.y, 1.0 ))\n               + i.x + vec4(0.0, i1.x, i2.x, 1.0 ));\n    \n    // Gradients: 7x7 points over a square, mapped onto an octahedron.\n    // The ring size 17*17 = 289 is close to a multiple of 49 (49*6 = 294)\n      float n_ = 0.142857142857; // 1.0/7.0\n      vec3  ns = n_ * D.wyz - D.xzx;\n    \n      vec4 j = p - 49.0 * floor(p * ns.z * ns.z);  //  mod(p,7*7)\n    \n      vec4 x_ = floor(j * ns.z);\n      vec4 y_ = floor(j - 7.0 * x_ );    // mod(j,N)\n    \n      vec4 x = x_ *ns.x + ns.yyyy;\n      vec4 y = y_ *ns.x + ns.yyyy;\n      vec4 h = 1.0 - abs(x) - abs(y);\n    \n      vec4 b0 = vec4( x.xy, y.xy );\n      vec4 b1 = vec4( x.zw, y.zw );\n    \n      //vec4 s0 = vec4(lessThan(b0,0.0))*2.0 - 1.0;\n      //vec4 s1 = vec4(lessThan(b1,0.0))*2.0 - 1.0;\n      vec4 s0 = floor(b0)*2.0 + 1.0;\n      vec4 s1 = floor(b1)*2.0 + 1.0;\n      vec4 sh = -step(h, vec4(0.0));\n    \n      vec4 a0 = b0.xzyw + s0.xzyw*sh.xxyy ;\n      vec4 a1 = b1.xzyw + s1.xzyw*sh.zzww ;\n    \n      vec3 p0 = vec3(a0.xy,h.x);\n      vec3 p1 = vec3(a0.zw,h.y);\n      vec3 p2 = vec3(a1.xy,h.z);\n      vec3 p3 = vec3(a1.zw,h.w);\n    \n    //Normalise gradients\n      vec4 norm = taylorInvSqrt(vec4(dot(p0,p0), dot(p1,p1), dot(p2, p2), dot(p3,p3)));\n      p0 *= norm.x;\n      p1 *= norm.y;\n      p2 *= norm.z;\n      p3 *= norm.w;\n    \n    // Mix final noise value\n      vec4 m = max(0.6 - vec4(dot(x0,x0), dot(x1,x1), dot(x2,x2), dot(x3,x3)), 0.0);\n      m = m * m;\n      return 42.0 * dot( m*m, vec4( dot(p0,x0), dot(p1,x1),\n                                    dot(p2,x2), dot(p3,x3) ) );\n      }\n              \n    \n    float fsnoise(float val1, float val2, float val3){\n      return snoise(vec3(val1,val2,val3));\n    }\n    \n    vec3 distortFunct(vec3 transformed, float factor) {\n      float radiusVariation = -fsnoise(\n        transformed.x * radiusNoiseFrequency + time,\n        transformed.y * radiusNoiseFrequency + time,\n        transformed.z * radiusNoiseFrequency + time \n      ) * radiusVariationAmplitude * factor;\n      return normalize(transformed) * (radiusVariation + radius);\n    }\n    \n    vec3 orthogonal(vec3 v) {\n      return normalize(abs(v.x) > abs(v.z) ? vec3(-v.y, v.x, 0.0)\n      : vec3(0.0, -v.z, v.y));\n    }\n    \n    vec3 distortNormal(vec3 position, vec3 distortedPosition, vec3 normal){\n      vec3 tangent1 = orthogonal(normal);\n      vec3 tangent2 = normalize(cross(normal, tangent1));\n      vec3 nearby1 = position + tangent1 * 0.1;\n      vec3 nearby2 = position + tangent2 * 0.1;\n      vec3 distorted1 = distortFunct(nearby1, 1.0);\n      vec3 distorted2 = distortFunct(nearby2, 1.0);\n      return normalize(cross(distorted1 - distortedPosition, distorted2 - distortedPosition));\n    }\n        \n    void main () {\n        vUv = uv;\n        float updateTime = time / 10.0;\n        vec3 transformed = position;\n        transformed = distortFunct(transformed, 1.0);\n        vec3 distortedNormal = distortNormal(position, transformed, normal);\n        vNormal = normal + distortedNormal;\n        gl_Position = projectionMatrix * modelViewMatrix * vec4(transformed,1.);\n    } \n`;\nexport const frag = `\n    precision highp float;\n    varying vec2 vUv;\n    varying vec3 vNormal;\n    \n    uniform float radius;\n    uniform float time;\n    uniform vec3 color;\n    uniform float radiusVariationAmplitude;\n    uniform float radiusNoiseFrequency;\n\n    \n    #define TAU 6.28318530718\n    #define MAX_ITER 5  \n    \n    vec3 getCaustic() {\n        vec2 uv = vUv;\n        \n        #ifdef SHOW_TILING\n        vec2 p = mod(uv*TAU*2.0, TAU)-250.0;\n        #else\n        vec2 p = mod(uv*TAU, TAU)-250.0;\n        #endif\n        \n        vec2 i = vec2(p);\n        float c = 1.0;\n        float inten = .005;\n        \n        for (int n = 0; n < MAX_ITER; n++) \n        {\n          float t = time * (1.0 - (3.5 / float(n+1)));\n          i = p + vec2(cos(t - i.x) + sin(t + i.y), sin(t - i.y) + cos(t + i.x));\n          c += 1.0/length(vec2(p.x / (sin(i.x+t)/inten),p.y / (cos(i.y+t)/inten)));\n        }\n        \n        c /= float(MAX_ITER);\n        c = 1.17-pow(c, 1.4);\n        vec3 colour = vec3(pow(abs(c), 8.0));\n            colour = clamp(colour + vec3(0.0, 0.35, 0.5), 0.0, 1.0);\n            \n        \n        #ifdef SHOW_TILING\n        // Flash tile borders...\n        vec2 pixel = 2.0 / vec2(200., 200.);\n        uv *= 2.0;\n        \n        float f = floor(mod(time*.5, 2.0)); // Flash value.\n        vec2 first = step(pixel, uv) * f;   // Rule out first screen pixels and flash.\n        uv  = step(fract(uv), pixel);// Add one line of pixels per tile.\n        colour = mix(colour, vec3(1.0, 1.0, 0.0), (uv.x + uv.y) * first.x * first.y); // Yellow line\n        \n        #endif\n        return colour;\n    }\n    \n    \n    #define iterations 11\n    #define formuparam 0.53\n    \n    #define volsteps 8\n    #define stepsize 0.1\n    \n    #define zoom   1.300\n    #define tile   0.820\n    #define speed  0.04 \n    \n    #define brightness 0.0015\n    #define darkmatter 0.100\n    #define distfading 0.470\n    #define saturation 1.450\n    \n    // https://www.shadertoy.com/view/Nt23zh\n    vec3 getSpace(){\n        //get coords and direction\n        vec2 uv = vec2(sin(vUv.x * 3.1415 * 2.), vUv.y);\n        vec3 dir = vec3(uv* zoom, 1.);\n        float locTime = time * speed;\n        \n        //mouse rotation\n        vec2 mouse = vec2(0.5, 0.5);\n        float a1=.5+mouse.x;\n        float a2=.8+mouse.y;\n        mat2 rot1=mat2(cos(a1),sin(a1),-sin(a1),cos(a1));\n        mat2 rot2=mat2(cos(a2),sin(a2),-sin(a2),cos(a2));\n        dir.xz*=rot1;\n        dir.xy*=rot2;\n        vec3 from=vec3(1.,.5,0.5);\n        from+=vec3(locTime*2.,locTime,-2.);\n        from.xz*=rot1;\n        from.xy*=rot2;\n        \n        //volumetric rendering\n        float s=0.1,fade=1.;\n        vec3 v=vec3(0.);\n        for (int r=0; r<volsteps; r++) {\n            vec3 p=from+s*dir*.5;\n            p = abs(vec3(tile)-mod(p,vec3(tile*2.))); // tiling fold\n            float pa,a=pa=0.;\n            for (int i=0; i<iterations; i++) { \n            p=abs(p)/dot(p,p)-formuparam; // the magic formula\n            a+=abs(length(p)-pa); // absolute sum of average change\n            pa=length(p);\n        }\n        float dm=max(0.,darkmatter-a*a*.001); //dark matter\n        a*=a*a; // add contrast\n        if (r>6) fade*=1.-dm; // dark matter, don't render near\n            //v+=vec3(dm,dm*.5,0.);\n            v+=fade;\n            v+=vec3(s,s*s,s*s*s*s)*a*brightness*fade; // coloring based on distance\n            fade*=distfading; // distance fading\n            s+=stepsize;\n        }\n        v=mix(vec3(length(v)),v,saturation); //color adjust\n        return vec3(1.0 - v * 0.1);\n    }\n    \n    vec3 rgb2hsv(vec3 c)\n    {\n        vec4 K = vec4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);\n        vec4 p = mix(vec4(c.bg, K.wz), vec4(c.gb, K.xy), step(c.b, c.g));\n        vec4 q = mix(vec4(p.xyw, c.r), vec4(c.r, p.yzx), step(p.x, c.r));\n    \n        float d = q.x - min(q.w, q.y);\n        float e = 1.0e-10;\n        return vec3(abs(q.z + (q.w - q.y) / (6.0 * d + e)), d / (q.x + e), q.x);\n    }\n    \n    vec3 hsv2rgb(vec3 c)\n    {\n        vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n        vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n        return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n    }\n    \n    // try https://www.shadertoy.com/view/7lj3Rh\n    \n    void main(){\n        float angle = clamp(dot(normalize(vNormal), vec3(0., -1., 0.)), 0., 1.);\n        // gl_FragColor = vec4(gl_FragColor.rgb * color, gl_FragColor.a);\n        gl_FragColor.rgb = getSpace();\n        gl_FragColor.a = 1.;\n        \n        vec3 idea_hsv = rgb2hsv(color);\n        vec3 space_hsv = rgb2hsv(gl_FragColor.rgb);\n        \n        space_hsv.x = mix(space_hsv.x, idea_hsv.x, 0.5);\n        space_hsv.y = mix(space_hsv.y, idea_hsv.y, 0.05);\n        space_hsv.z = mix(space_hsv.z, idea_hsv.z, 0.1);\n        \n        gl_FragColor.rgb = hsv2rgb(space_hsv);\n        \n        gl_FragColor.rgb = mix(gl_FragColor.rgb, mix(gl_FragColor.rgb, vec3(0.), 0.5), angle);\n    }\n`;","map":{"version":3,"sources":["/Users/dub_ceo/Desktop/spacesvr-starter/src/ideas/Builder12/layers/basis/visual/shaders/world.ts"],"names":["vert","frag"],"mappings":"AAAA,OAAO,MAAMA,IAAI,GAAI;AACrvJO;AAyJP,OAAO,MAAMC,IAAI,GAAI;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAzJO","sourcesContent":["export const vert = `\n    precision highp float;\n    uniform float radius;\n    uniform float time;\n    uniform vec3 color;\n    uniform float radiusVariationAmplitude;\n    uniform float radiusNoiseFrequency;\n    varying vec2 vUv;\n    varying vec3 vNormal;\n    \n    \n    // Description : Array and textureless GLSL 2D/3D/4D simplex\n    //               noise functions.\n    //      Author : Ian McEwan, Ashima Arts.\n    //  Maintainer : ijm\n    //     Lastmod : 20110822 (ijm)\n    //     License : Copyright (C) 2011 Ashima Arts. All rights reserved.\n    //               Distributed under the MIT License. See LICENSE file.\n    //               https://github.com/ashima/webgl-noise\n    //\n    \n    vec3 mod289(vec3 x) {\n      return x - floor(x * (1.0 / 289.0)) * 289.0;\n    }\n    \n    vec4 mod289(vec4 x) {\n      return x - floor(x * (1.0 / 289.0)) * 289.0;\n    }\n    \n    vec4 permute(vec4 x) {\n         return mod289(((x*34.0)+1.0)*x);\n    }\n    \n    vec4 taylorInvSqrt(vec4 r)\n    {\n      return 1.79284291400159 - 0.85373472095314 * r;\n    }\n    \n    float snoise(vec3 v)\n      {\n      const vec2  C = vec2(1.0/6.0, 1.0/3.0) ;\n      const vec4  D = vec4(0.0, 0.5, 1.0, 2.0);\n    \n    // First corner\n      vec3 i  = floor(v + dot(v, C.yyy) );\n      vec3 x0 =   v - i + dot(i, C.xxx) ;\n    \n    // Other corners\n      vec3 g = step(x0.yzx, x0.xyz);\n      vec3 l = 1.0 - g;\n      vec3 i1 = min( g.xyz, l.zxy );\n      vec3 i2 = max( g.xyz, l.zxy );\n    \n      //   x0 = x0 - 0.0 + 0.0 * C.xxx;\n      //   x1 = x0 - i1  + 1.0 * C.xxx;\n      //   x2 = x0 - i2  + 2.0 * C.xxx;\n      //   x3 = x0 - 1.0 + 3.0 * C.xxx;\n      vec3 x1 = x0 - i1 + C.xxx;\n      vec3 x2 = x0 - i2 + C.yyy; // 2.0*C.x = 1/3 = C.y\n      vec3 x3 = x0 - D.yyy;      // -1.0+3.0*C.x = -0.5 = -D.y\n    \n    // Permutations\n      i = mod289(i);\n      vec4 p = permute( permute( permute(\n                 i.z + vec4(0.0, i1.z, i2.z, 1.0 ))\n               + i.y + vec4(0.0, i1.y, i2.y, 1.0 ))\n               + i.x + vec4(0.0, i1.x, i2.x, 1.0 ));\n    \n    // Gradients: 7x7 points over a square, mapped onto an octahedron.\n    // The ring size 17*17 = 289 is close to a multiple of 49 (49*6 = 294)\n      float n_ = 0.142857142857; // 1.0/7.0\n      vec3  ns = n_ * D.wyz - D.xzx;\n    \n      vec4 j = p - 49.0 * floor(p * ns.z * ns.z);  //  mod(p,7*7)\n    \n      vec4 x_ = floor(j * ns.z);\n      vec4 y_ = floor(j - 7.0 * x_ );    // mod(j,N)\n    \n      vec4 x = x_ *ns.x + ns.yyyy;\n      vec4 y = y_ *ns.x + ns.yyyy;\n      vec4 h = 1.0 - abs(x) - abs(y);\n    \n      vec4 b0 = vec4( x.xy, y.xy );\n      vec4 b1 = vec4( x.zw, y.zw );\n    \n      //vec4 s0 = vec4(lessThan(b0,0.0))*2.0 - 1.0;\n      //vec4 s1 = vec4(lessThan(b1,0.0))*2.0 - 1.0;\n      vec4 s0 = floor(b0)*2.0 + 1.0;\n      vec4 s1 = floor(b1)*2.0 + 1.0;\n      vec4 sh = -step(h, vec4(0.0));\n    \n      vec4 a0 = b0.xzyw + s0.xzyw*sh.xxyy ;\n      vec4 a1 = b1.xzyw + s1.xzyw*sh.zzww ;\n    \n      vec3 p0 = vec3(a0.xy,h.x);\n      vec3 p1 = vec3(a0.zw,h.y);\n      vec3 p2 = vec3(a1.xy,h.z);\n      vec3 p3 = vec3(a1.zw,h.w);\n    \n    //Normalise gradients\n      vec4 norm = taylorInvSqrt(vec4(dot(p0,p0), dot(p1,p1), dot(p2, p2), dot(p3,p3)));\n      p0 *= norm.x;\n      p1 *= norm.y;\n      p2 *= norm.z;\n      p3 *= norm.w;\n    \n    // Mix final noise value\n      vec4 m = max(0.6 - vec4(dot(x0,x0), dot(x1,x1), dot(x2,x2), dot(x3,x3)), 0.0);\n      m = m * m;\n      return 42.0 * dot( m*m, vec4( dot(p0,x0), dot(p1,x1),\n                                    dot(p2,x2), dot(p3,x3) ) );\n      }\n              \n    \n    float fsnoise(float val1, float val2, float val3){\n      return snoise(vec3(val1,val2,val3));\n    }\n    \n    vec3 distortFunct(vec3 transformed, float factor) {\n      float radiusVariation = -fsnoise(\n        transformed.x * radiusNoiseFrequency + time,\n        transformed.y * radiusNoiseFrequency + time,\n        transformed.z * radiusNoiseFrequency + time \n      ) * radiusVariationAmplitude * factor;\n      return normalize(transformed) * (radiusVariation + radius);\n    }\n    \n    vec3 orthogonal(vec3 v) {\n      return normalize(abs(v.x) > abs(v.z) ? vec3(-v.y, v.x, 0.0)\n      : vec3(0.0, -v.z, v.y));\n    }\n    \n    vec3 distortNormal(vec3 position, vec3 distortedPosition, vec3 normal){\n      vec3 tangent1 = orthogonal(normal);\n      vec3 tangent2 = normalize(cross(normal, tangent1));\n      vec3 nearby1 = position + tangent1 * 0.1;\n      vec3 nearby2 = position + tangent2 * 0.1;\n      vec3 distorted1 = distortFunct(nearby1, 1.0);\n      vec3 distorted2 = distortFunct(nearby2, 1.0);\n      return normalize(cross(distorted1 - distortedPosition, distorted2 - distortedPosition));\n    }\n        \n    void main () {\n        vUv = uv;\n        float updateTime = time / 10.0;\n        vec3 transformed = position;\n        transformed = distortFunct(transformed, 1.0);\n        vec3 distortedNormal = distortNormal(position, transformed, normal);\n        vNormal = normal + distortedNormal;\n        gl_Position = projectionMatrix * modelViewMatrix * vec4(transformed,1.);\n    } \n`;\n\nexport const frag = `\n    precision highp float;\n    varying vec2 vUv;\n    varying vec3 vNormal;\n    \n    uniform float radius;\n    uniform float time;\n    uniform vec3 color;\n    uniform float radiusVariationAmplitude;\n    uniform float radiusNoiseFrequency;\n\n    \n    #define TAU 6.28318530718\n    #define MAX_ITER 5  \n    \n    vec3 getCaustic() {\n        vec2 uv = vUv;\n        \n        #ifdef SHOW_TILING\n        vec2 p = mod(uv*TAU*2.0, TAU)-250.0;\n        #else\n        vec2 p = mod(uv*TAU, TAU)-250.0;\n        #endif\n        \n        vec2 i = vec2(p);\n        float c = 1.0;\n        float inten = .005;\n        \n        for (int n = 0; n < MAX_ITER; n++) \n        {\n          float t = time * (1.0 - (3.5 / float(n+1)));\n          i = p + vec2(cos(t - i.x) + sin(t + i.y), sin(t - i.y) + cos(t + i.x));\n          c += 1.0/length(vec2(p.x / (sin(i.x+t)/inten),p.y / (cos(i.y+t)/inten)));\n        }\n        \n        c /= float(MAX_ITER);\n        c = 1.17-pow(c, 1.4);\n        vec3 colour = vec3(pow(abs(c), 8.0));\n            colour = clamp(colour + vec3(0.0, 0.35, 0.5), 0.0, 1.0);\n            \n        \n        #ifdef SHOW_TILING\n        // Flash tile borders...\n        vec2 pixel = 2.0 / vec2(200., 200.);\n        uv *= 2.0;\n        \n        float f = floor(mod(time*.5, 2.0)); // Flash value.\n        vec2 first = step(pixel, uv) * f;   // Rule out first screen pixels and flash.\n        uv  = step(fract(uv), pixel);// Add one line of pixels per tile.\n        colour = mix(colour, vec3(1.0, 1.0, 0.0), (uv.x + uv.y) * first.x * first.y); // Yellow line\n        \n        #endif\n        return colour;\n    }\n    \n    \n    #define iterations 11\n    #define formuparam 0.53\n    \n    #define volsteps 8\n    #define stepsize 0.1\n    \n    #define zoom   1.300\n    #define tile   0.820\n    #define speed  0.04 \n    \n    #define brightness 0.0015\n    #define darkmatter 0.100\n    #define distfading 0.470\n    #define saturation 1.450\n    \n    // https://www.shadertoy.com/view/Nt23zh\n    vec3 getSpace(){\n        //get coords and direction\n        vec2 uv = vec2(sin(vUv.x * 3.1415 * 2.), vUv.y);\n        vec3 dir = vec3(uv* zoom, 1.);\n        float locTime = time * speed;\n        \n        //mouse rotation\n        vec2 mouse = vec2(0.5, 0.5);\n        float a1=.5+mouse.x;\n        float a2=.8+mouse.y;\n        mat2 rot1=mat2(cos(a1),sin(a1),-sin(a1),cos(a1));\n        mat2 rot2=mat2(cos(a2),sin(a2),-sin(a2),cos(a2));\n        dir.xz*=rot1;\n        dir.xy*=rot2;\n        vec3 from=vec3(1.,.5,0.5);\n        from+=vec3(locTime*2.,locTime,-2.);\n        from.xz*=rot1;\n        from.xy*=rot2;\n        \n        //volumetric rendering\n        float s=0.1,fade=1.;\n        vec3 v=vec3(0.);\n        for (int r=0; r<volsteps; r++) {\n            vec3 p=from+s*dir*.5;\n            p = abs(vec3(tile)-mod(p,vec3(tile*2.))); // tiling fold\n            float pa,a=pa=0.;\n            for (int i=0; i<iterations; i++) { \n            p=abs(p)/dot(p,p)-formuparam; // the magic formula\n            a+=abs(length(p)-pa); // absolute sum of average change\n            pa=length(p);\n        }\n        float dm=max(0.,darkmatter-a*a*.001); //dark matter\n        a*=a*a; // add contrast\n        if (r>6) fade*=1.-dm; // dark matter, don't render near\n            //v+=vec3(dm,dm*.5,0.);\n            v+=fade;\n            v+=vec3(s,s*s,s*s*s*s)*a*brightness*fade; // coloring based on distance\n            fade*=distfading; // distance fading\n            s+=stepsize;\n        }\n        v=mix(vec3(length(v)),v,saturation); //color adjust\n        return vec3(1.0 - v * 0.1);\n    }\n    \n    vec3 rgb2hsv(vec3 c)\n    {\n        vec4 K = vec4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);\n        vec4 p = mix(vec4(c.bg, K.wz), vec4(c.gb, K.xy), step(c.b, c.g));\n        vec4 q = mix(vec4(p.xyw, c.r), vec4(c.r, p.yzx), step(p.x, c.r));\n    \n        float d = q.x - min(q.w, q.y);\n        float e = 1.0e-10;\n        return vec3(abs(q.z + (q.w - q.y) / (6.0 * d + e)), d / (q.x + e), q.x);\n    }\n    \n    vec3 hsv2rgb(vec3 c)\n    {\n        vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n        vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n        return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n    }\n    \n    // try https://www.shadertoy.com/view/7lj3Rh\n    \n    void main(){\n        float angle = clamp(dot(normalize(vNormal), vec3(0., -1., 0.)), 0., 1.);\n        // gl_FragColor = vec4(gl_FragColor.rgb * color, gl_FragColor.a);\n        gl_FragColor.rgb = getSpace();\n        gl_FragColor.a = 1.;\n        \n        vec3 idea_hsv = rgb2hsv(color);\n        vec3 space_hsv = rgb2hsv(gl_FragColor.rgb);\n        \n        space_hsv.x = mix(space_hsv.x, idea_hsv.x, 0.5);\n        space_hsv.y = mix(space_hsv.y, idea_hsv.y, 0.05);\n        space_hsv.z = mix(space_hsv.z, idea_hsv.z, 0.1);\n        \n        gl_FragColor.rgb = hsv2rgb(space_hsv);\n        \n        gl_FragColor.rgb = mix(gl_FragColor.rgb, mix(gl_FragColor.rgb, vec3(0.), 0.5), angle);\n    }\n`;\n"]},"metadata":{},"sourceType":"module"}