{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/dub_ceo/Desktop/spacesvr-starter/src/ideas/Builder12/layers/communication/visual/VisualInteraction/index.tsx\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { useContext, useEffect, useMemo, useState } from \"react\";\nimport { useSpring, animated } from \"react-spring/three\";\nimport { Text } from \"@react-three/drei\";\nimport { Flex } from \"@react-three/flex\";\nimport { DialogueContext } from \"../VisualDialogue\";\nimport VisualDecision from \"./components/VisualDecision\";\nimport TextInput from \"../components/TextInput\";\nconst FONT_FILE = \"https://d27rt3a60hh1lx.cloudfront.net/fonts/Quicksand_Bold.otf\";\nexport function VisualInteraction(props) {\n  const {\n    effect,\n    text,\n    input,\n    decisions,\n    enabled\n  } = props;\n  const {\n    setKey\n  } = useContext(DialogueContext);\n  const {\n    0: prevEnabled,\n    1: setPrevEnabled\n  } = useState(false);\n  const {\n    posZ,\n    scaleY\n  } = useSpring({\n    posZ: enabled ? 0.003 : -0.003,\n    scaleY: enabled ? 1 : 0\n  });\n  const onSubmit = useMemo(() => {\n    if (!decisions) return () => {\n      return;\n    };\n\n    for (const decision of decisions) {\n      if (decision.name === \"submit\") {\n        return () => {\n          if (decision.onClick) decision.onClick();\n          if (decision.nextKey) setKey(decision.nextKey || \"\");\n        };\n      }\n    }\n  }, [decisions]);\n  useEffect(() => {\n    if (prevEnabled !== enabled) {\n      setPrevEnabled(enabled);\n\n      if (enabled && effect) {\n        effect().then(newKey => {\n          if (newKey) {\n            setKey(newKey);\n          }\n        });\n      }\n    }\n  }, [effect, setKey, prevEnabled, enabled]);\n  const textStyles = {\n    font: FONT_FILE,\n    maxWidth: 0.8,\n    textAlign: \"center\",\n    fontSize: 0.06,\n    outlineWidth: 0.0065\n  };\n  return /*#__PURE__*/_jsxDEV(animated.group, {\n    name: `interaction-${text.substr(0, 8)}`,\n    \"position-z\": posZ,\n    \"scale-y\": scaleY,\n    children: [/*#__PURE__*/_jsxDEV(Text, _objectSpread(_objectSpread({}, textStyles), {}, {\n      anchorY: input ? \"bottom\" : \"middle\",\n      \"position-y\": 0,\n      children: text\n    }), void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this), input && (input.persist || enabled) && /*#__PURE__*/_jsxDEV(TextInput, {\n      value: input.value,\n      setValue: input.setValue,\n      \"position-y\": -0.09,\n      onSubmit: onSubmit,\n      enabled: enabled,\n      inputType: input.type,\n      persist: input.persist\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 9\n    }, this), decisions && /*#__PURE__*/_jsxDEV(Flex, {\n      name: \"decisions\",\n      size: [1, 0.4, 0.1],\n      position: [-0.5, -0.35 / 2, 0.05],\n      justifyContent: \"center\",\n      alignItems: \"flex-start\",\n      flexWrap: \"wrap\",\n      flexDir: \"row\",\n      children: decisions.map(decision => /*#__PURE__*/_jsxDEV(VisualDecision, _objectSpread({}, decision), decision.name, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 61,\n    columnNumber: 5\n  }, this);\n}","map":{"version":3,"sources":["/Users/dub_ceo/Desktop/spacesvr-starter/src/ideas/Builder12/layers/communication/visual/VisualInteraction/index.tsx"],"names":["useContext","useEffect","useMemo","useState","useSpring","animated","Text","Flex","DialogueContext","VisualDecision","TextInput","FONT_FILE","VisualInteraction","props","effect","text","input","decisions","enabled","setKey","prevEnabled","setPrevEnabled","posZ","scaleY","onSubmit","decision","name","onClick","nextKey","then","newKey","textStyles","font","maxWidth","textAlign","fontSize","outlineWidth","substr","persist","value","setValue","type","map"],"mappings":";;;;;;;;;AAAA,SAASA,UAAT,EAAqBC,SAArB,EAAgCC,OAAhC,EAAyCC,QAAzC,QAAyD,OAAzD;AACA,SAASC,SAAT,EAAoBC,QAApB,QAAoC,oBAApC;AACA,SAASC,IAAT,QAAqB,mBAArB;AACA,SAASC,IAAT,QAAqB,mBAArB;AACA,SAASC,eAAT,QAAgC,mBAAhC;AAEA,OAAOC,cAAP,MAA2B,6BAA3B;AACA,OAAOC,SAAP,MAAsB,yBAAtB;AAEA,MAAMC,SAAS,GACb,gEADF;AAGA,OAAO,SAASC,iBAAT,CAA2BC,KAA3B,EAAsE;AAC3E,QAAM;AAAEC,IAAAA,MAAF;AAAUC,IAAAA,IAAV;AAAgBC,IAAAA,KAAhB;AAAuBC,IAAAA,SAAvB;AAAkCC,IAAAA;AAAlC,MAA8CL,KAApD;AAEA,QAAM;AAAEM,IAAAA;AAAF,MAAanB,UAAU,CAACQ,eAAD,CAA7B;AACA,QAAM;AAAA,OAACY,WAAD;AAAA,OAAcC;AAAd,MAAgClB,QAAQ,CAAC,KAAD,CAA9C;AAEA,QAAM;AAAEmB,IAAAA,IAAF;AAAQC,IAAAA;AAAR,MAAmBnB,SAAS,CAAC;AACjCkB,IAAAA,IAAI,EAAEJ,OAAO,GAAG,KAAH,GAAW,CAAC,KADQ;AAEjCK,IAAAA,MAAM,EAAEL,OAAO,GAAG,CAAH,GAAO;AAFW,GAAD,CAAlC;AAKA,QAAMM,QAAQ,GAAGtB,OAAO,CAAC,MAAM;AAC7B,QAAI,CAACe,SAAL,EACE,OAAO,MAAM;AACX;AACD,KAFD;;AAGF,SAAK,MAAMQ,QAAX,IAAuBR,SAAvB,EAAkC;AAChC,UAAIQ,QAAQ,CAACC,IAAT,KAAkB,QAAtB,EAAgC;AAC9B,eAAO,MAAM;AACX,cAAID,QAAQ,CAACE,OAAb,EAAsBF,QAAQ,CAACE,OAAT;AACtB,cAAIF,QAAQ,CAACG,OAAb,EAAsBT,MAAM,CAACM,QAAQ,CAACG,OAAT,IAAoB,EAArB,CAAN;AACvB,SAHD;AAID;AACF;AACF,GAbuB,EAarB,CAACX,SAAD,CAbqB,CAAxB;AAeAhB,EAAAA,SAAS,CAAC,MAAM;AACd,QAAImB,WAAW,KAAKF,OAApB,EAA6B;AAC3BG,MAAAA,cAAc,CAACH,OAAD,CAAd;;AACA,UAAIA,OAAO,IAAIJ,MAAf,EAAuB;AACrBA,QAAAA,MAAM,GAAGe,IAAT,CAAeC,MAAD,IAAoB;AAChC,cAAIA,MAAJ,EAAY;AACVX,YAAAA,MAAM,CAACW,MAAD,CAAN;AACD;AACF,SAJD;AAKD;AACF;AACF,GAXQ,EAWN,CAAChB,MAAD,EAASK,MAAT,EAAiBC,WAAjB,EAA8BF,OAA9B,CAXM,CAAT;AAaA,QAAMa,UAA6C,GAAG;AACpDC,IAAAA,IAAI,EAAErB,SAD8C;AAEpDsB,IAAAA,QAAQ,EAAE,GAF0C;AAGpDC,IAAAA,SAAS,EAAE,QAHyC;AAIpDC,IAAAA,QAAQ,EAAE,IAJ0C;AAKpDC,IAAAA,YAAY,EAAE;AALsC,GAAtD;AAQA,sBACE,QAAC,QAAD,CAAU,KAAV;AACE,IAAA,IAAI,EAAG,eAAcrB,IAAI,CAACsB,MAAL,CAAY,CAAZ,EAAe,CAAf,CAAkB,EADzC;AAEE,kBAAYf,IAFd;AAGE,eAASC,MAHX;AAAA,4BAKE,QAAC,IAAD,kCACMQ,UADN;AAEE,MAAA,OAAO,EAAEf,KAAK,GAAG,QAAH,GAAc,QAF9B;AAGE,oBAAY,CAHd;AAAA,gBAKGD;AALH;AAAA;AAAA;AAAA;AAAA,YALF,EAYGC,KAAK,KAAKA,KAAK,CAACsB,OAAN,IAAiBpB,OAAtB,CAAL,iBACC,QAAC,SAAD;AACE,MAAA,KAAK,EAAEF,KAAK,CAACuB,KADf;AAEE,MAAA,QAAQ,EAAEvB,KAAK,CAACwB,QAFlB;AAGE,oBAAY,CAAC,IAHf;AAIE,MAAA,QAAQ,EAAEhB,QAJZ;AAKE,MAAA,OAAO,EAAEN,OALX;AAME,MAAA,SAAS,EAAEF,KAAK,CAACyB,IANnB;AAOE,MAAA,OAAO,EAAEzB,KAAK,CAACsB;AAPjB;AAAA;AAAA;AAAA;AAAA,YAbJ,EAuBGrB,SAAS,iBACR,QAAC,IAAD;AACE,MAAA,IAAI,EAAC,WADP;AAEE,MAAA,IAAI,EAAE,CAAC,CAAD,EAAI,GAAJ,EAAS,GAAT,CAFR;AAGE,MAAA,QAAQ,EAAE,CAAC,CAAC,GAAF,EAAO,CAAC,IAAD,GAAQ,CAAf,EAAkB,IAAlB,CAHZ;AAIE,MAAA,cAAc,EAAC,QAJjB;AAKE,MAAA,UAAU,EAAC,YALb;AAME,MAAA,QAAQ,EAAC,MANX;AAOE,MAAA,OAAO,EAAC,KAPV;AAAA,gBASGA,SAAS,CAACyB,GAAV,CAAejB,QAAD,iBACb,QAAC,cAAD,oBAAwCA,QAAxC,GAAqBA,QAAQ,CAACC,IAA9B;AAAA;AAAA;AAAA;AAAA,cADD;AATH;AAAA;AAAA;AAAA;AAAA,YAxBJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAyCD","sourcesContent":["import { useContext, useEffect, useMemo, useState } from \"react\";\nimport { useSpring, animated } from \"react-spring/three\";\nimport { Text } from \"@react-three/drei\";\nimport { Flex } from \"@react-three/flex\";\nimport { DialogueContext } from \"../VisualDialogue\";\nimport { Interaction } from \"../../index\";\nimport VisualDecision from \"./components/VisualDecision\";\nimport TextInput from \"../components/TextInput\";\n\nconst FONT_FILE =\n  \"https://d27rt3a60hh1lx.cloudfront.net/fonts/Quicksand_Bold.otf\";\n\nexport function VisualInteraction(props: Interaction & { enabled: boolean }) {\n  const { effect, text, input, decisions, enabled } = props;\n\n  const { setKey } = useContext(DialogueContext);\n  const [prevEnabled, setPrevEnabled] = useState(false);\n\n  const { posZ, scaleY } = useSpring({\n    posZ: enabled ? 0.003 : -0.003,\n    scaleY: enabled ? 1 : 0,\n  });\n\n  const onSubmit = useMemo(() => {\n    if (!decisions)\n      return () => {\n        return;\n      };\n    for (const decision of decisions) {\n      if (decision.name === \"submit\") {\n        return () => {\n          if (decision.onClick) decision.onClick();\n          if (decision.nextKey) setKey(decision.nextKey || \"\");\n        };\n      }\n    }\n  }, [decisions]);\n\n  useEffect(() => {\n    if (prevEnabled !== enabled) {\n      setPrevEnabled(enabled);\n      if (enabled && effect) {\n        effect().then((newKey: string) => {\n          if (newKey) {\n            setKey(newKey);\n          }\n        });\n      }\n    }\n  }, [effect, setKey, prevEnabled, enabled]);\n\n  const textStyles: Partial<typeof Text.defaultProps> = {\n    font: FONT_FILE,\n    maxWidth: 0.8,\n    textAlign: \"center\",\n    fontSize: 0.06,\n    outlineWidth: 0.0065,\n  };\n\n  return (\n    <animated.group\n      name={`interaction-${text.substr(0, 8)}`}\n      position-z={posZ}\n      scale-y={scaleY}\n    >\n      <Text\n        {...textStyles}\n        anchorY={input ? \"bottom\" : \"middle\"}\n        position-y={0}\n      >\n        {text}\n      </Text>\n      {input && (input.persist || enabled) && (\n        <TextInput\n          value={input.value}\n          setValue={input.setValue}\n          position-y={-0.09}\n          onSubmit={onSubmit}\n          enabled={enabled}\n          inputType={input.type}\n          persist={input.persist}\n        />\n      )}\n      {decisions && (\n        <Flex\n          name=\"decisions\"\n          size={[1, 0.4, 0.1]}\n          position={[-0.5, -0.35 / 2, 0.05]}\n          justifyContent=\"center\"\n          alignItems=\"flex-start\"\n          flexWrap=\"wrap\"\n          flexDir=\"row\"\n        >\n          {decisions.map((decision) => (\n            <VisualDecision key={decision.name} {...decision} />\n          ))}\n        </Flex>\n      )}\n    </animated.group>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}