{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/dub_ceo/Desktop/spacesvr-starter/src/ideas/Builder12/models/Builder2.tsx\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/*\nAuto-generated by: https://github.com/pmndrs/gltfjsx\n*/\nimport * as THREE from \"three\";\nimport React, { useCallback, useEffect, useRef, useState } from \"react\";\nimport { useGLTF } from \"@react-three/drei\";\nimport { useFrame, useThree } from \"@react-three/fiber\";\nimport { SkeletonUtils } from \"../utils/SkeletonUtils\";\nconst FILE_URL = \"https://d27rt3a60hh1lx.cloudfront.net/models/SwimmingMort-1627646231/mort.glb.gz\";\nexport default function Model(props) {\n  const {\n    animation = \"idle\",\n    duration = 0.5\n  } = props,\n        rest = _objectWithoutProperties(props, [\"animation\", \"duration\"]);\n\n  const group = useRef();\n  const {\n    nodes,\n    materials,\n    animations\n  } = useGLTF(FILE_URL);\n  const scene = useThree(state => state.scene);\n  const {\n    0: armature,\n    1: setArmature\n  } = useState();\n  const {\n    0: rig,\n    1: setRig\n  } = useState();\n  const {\n    0: mixer,\n    1: setMixer\n  } = useState();\n  const actions = useRef();\n  const previousAction = useRef(animation); // function to dispose of loaded dummy\n\n  const disposeDummy = useCallback(() => {\n    if (armature) {\n      armature.traverse(obj => scene.remove(obj));\n      setArmature(undefined);\n      setRig(undefined);\n    }\n  }, [armature]);\n\n  const fadeToAction = (name, duration = 0.2) => {\n    const acts = actions === null || actions === void 0 ? void 0 : actions.current;\n    if (!acts) return;\n    if (name === previousAction.current) return;\n\n    if (acts[previousAction.current].enabled) {\n      acts[previousAction.current].fadeOut(duration);\n    }\n\n    acts[name].reset().setEffectiveTimeScale(1).setEffectiveWeight(1).fadeIn(duration).play();\n    previousAction.current = name;\n  };\n\n  useEffect(() => {\n    if (!armature) {\n      // create new armature\n      const newArmature = SkeletonUtils.clone(nodes.Armature); //create new mixer\n\n      const avatar = getArmatureChild(newArmature, \"avatar\");\n      const newMixer = new THREE.AnimationMixer(avatar); // store the rig in state because when it is added to the scene\n      // the armature loses the child\n\n      const locRig = getArmatureChild(newArmature, \"rig\");\n      setRig(locRig); // see meshes up close, need this shit bruv\n\n      newArmature.traverse(obj => obj.frustumCulled = false); // load all actions and play selected one\n      // @ts-ignore\n\n      actions.current = animations.reduce((acc, cur) => {\n        const name = cur.name; // @ts-ignore\n\n        acc[name] = newMixer.clipAction(cur, group.current);\n        return acc;\n      }, {}); // play the current animation\n      // @ts-ignore\n\n      actions.current[animation].play(); // store into state\n\n      setArmature(newArmature);\n      setMixer(newMixer);\n      return () => {\n        disposeDummy();\n      };\n    }\n  }, [armature]);\n  useEffect(() => {\n    if (!armature || !actions.current) return;\n    fadeToAction(animation, duration);\n  }, [animation, armature, actions]); // update animation every frame\n\n  useFrame((_, delta) => mixer && mixer.update(delta));\n\n  if (!armature) {\n    return null;\n  } // get armature mesh children\n\n\n  const avatar = getArmatureChild(armature, \"avatar\");\n  return /*#__PURE__*/_jsxDEV(\"group\", _objectSpread(_objectSpread({\n    ref: group\n  }, rest), {}, {\n    dispose: null,\n    \"rotation-y\": 0,\n    children: /*#__PURE__*/_jsxDEV(\"group\", {\n      name: \"Armature\",\n      \"rotation-x\": Math.PI / 2,\n      scale: 0.00615,\n      \"position-y\": 0,\n      frustumCulled: false,\n      children: [rig && /*#__PURE__*/_jsxDEV(\"primitive\", {\n        object: rig\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 17\n      }, this), getSkinnedMesh(avatar, materials[\"avatar.mat\"])]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 7\n    }, this)\n  }), void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 132,\n    columnNumber: 5\n  }, this);\n} // helper, create explicit skinnedMesh object as react component\n\nconst getSkinnedMesh = (object, material) => {\n  return /*#__PURE__*/_jsxDEV(\"skinnedMesh\", {\n    material: material,\n    geometry: object.geometry,\n    skeleton: object.skeleton,\n    frustumCulled: false\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 150,\n    columnNumber: 5\n  }, this);\n}; // helper, get one of children from the armature, returns undefined if not found\n\n\nconst getArmatureChild = (armature, id) => {\n  switch (id) {\n    case \"avatar\":\n      return armature.children.find(ch => ch.name === \"avatar\");\n\n    case \"rig\":\n      return armature.children.find(ch => ch.name === \"mixamorigHips\");\n  }\n\n  return undefined;\n};\n\nuseGLTF.preload(FILE_URL);","map":{"version":3,"sources":["/Users/dub_ceo/Desktop/spacesvr-starter/src/ideas/Builder12/models/Builder2.tsx"],"names":["THREE","React","useCallback","useEffect","useRef","useState","useGLTF","useFrame","useThree","SkeletonUtils","FILE_URL","Model","props","animation","duration","rest","group","nodes","materials","animations","scene","state","armature","setArmature","rig","setRig","mixer","setMixer","actions","previousAction","disposeDummy","traverse","obj","remove","undefined","fadeToAction","name","acts","current","enabled","fadeOut","reset","setEffectiveTimeScale","setEffectiveWeight","fadeIn","play","newArmature","clone","Armature","avatar","getArmatureChild","newMixer","AnimationMixer","locRig","frustumCulled","reduce","acc","cur","clipAction","_","delta","update","Math","PI","getSkinnedMesh","object","material","geometry","skeleton","id","children","find","ch","preload"],"mappings":"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","sourcesContent":["/*\nAuto-generated by: https://github.com/pmndrs/gltfjsx\n*/\n\nimport * as THREE from \"three\";\nimport React, { useCallback, useEffect, useRef, useState } from \"react\";\nimport { useGLTF } from \"@react-three/drei\";\nimport { GLTF } from \"three/examples/jsm/loaders/GLTFLoader\";\nimport { GroupProps, useFrame, useThree } from \"@react-three/fiber\";\nimport { AnimationMixer, Bone, Object3D, SkinnedMesh } from \"three\";\nimport { SkeletonUtils } from \"../utils/SkeletonUtils\";\n\ntype GLTFResult = GLTF & {\n  nodes: {\n    avatar: THREE.SkinnedMesh;\n    mixamorigHips: THREE.Bone;\n    Armature: Object3D;\n  };\n  materials: {\n    [\"avatar.mat\"]: THREE.MeshStandardMaterial;\n  };\n};\n\ntype ActionName = \"swimmin\" | \"idle\" | \"lay\" | \"wave\";\ntype GLTFActions = Record<ActionName, THREE.AnimationAction>;\n\nconst FILE_URL =\n  \"https://d27rt3a60hh1lx.cloudfront.net/models/SwimmingMort-1627646231/mort.glb.gz\";\n\ntype ModelProps = {\n  animation?: ActionName;\n  duration?: number;\n} & GroupProps;\n\nexport default function Model(props: ModelProps) {\n  const { animation = \"idle\", duration = 0.5, ...rest } = props;\n\n  const group = useRef<THREE.Group>();\n  const { nodes, materials, animations } = useGLTF(FILE_URL) as GLTFResult;\n\n  const scene = useThree((state) => state.scene);\n  const [armature, setArmature] = useState<Object3D | undefined>();\n  const [rig, setRig] = useState<Bone>();\n  const [mixer, setMixer] = useState<AnimationMixer | undefined>();\n  const actions = useRef<GLTFActions>();\n  const previousAction = useRef(animation);\n\n  // function to dispose of loaded dummy\n  const disposeDummy = useCallback(() => {\n    if (armature) {\n      armature.traverse((obj) => scene.remove(obj));\n      setArmature(undefined);\n      setRig(undefined);\n    }\n  }, [armature]);\n\n  const fadeToAction = (name: ActionName, duration = 0.2) => {\n    const acts = actions?.current;\n    if (!acts) return;\n    if (name === previousAction.current) return;\n\n    if (acts[previousAction.current].enabled) {\n      acts[previousAction.current].fadeOut(duration);\n    }\n\n    acts[name]\n      .reset()\n      .setEffectiveTimeScale(1)\n      .setEffectiveWeight(1)\n      .fadeIn(duration)\n      .play();\n\n    previousAction.current = name;\n  };\n\n  useEffect(() => {\n    if (!armature) {\n      // create new armature\n      const newArmature = SkeletonUtils.clone(nodes.Armature) as Object3D;\n\n      //create new mixer\n      const avatar = getArmatureChild(newArmature, \"avatar\") as SkinnedMesh;\n      const newMixer = new THREE.AnimationMixer(avatar);\n\n      // store the rig in state because when it is added to the scene\n      // the armature loses the child\n      const locRig = getArmatureChild(newArmature, \"rig\") as Bone;\n      setRig(locRig);\n\n      // see meshes up close, need this shit bruv\n      newArmature.traverse((obj) => (obj.frustumCulled = false));\n\n      // load all actions and play selected one\n      // @ts-ignore\n      actions.current = animations.reduce((acc, cur) => {\n        const name = cur.name as ActionName;\n        // @ts-ignore\n        acc[name] = newMixer.clipAction(cur, group.current);\n        return acc;\n      }, {});\n\n      // play the current animation\n      // @ts-ignore\n      actions.current[animation].play();\n\n      // store into state\n      setArmature(newArmature);\n      setMixer(newMixer);\n\n      return () => {\n        disposeDummy();\n      };\n    }\n  }, [armature]);\n\n  useEffect(() => {\n    if (!armature || !actions.current) return;\n    fadeToAction(animation, duration);\n  }, [animation, armature, actions]);\n\n  // update animation every frame\n  useFrame((_, delta) => mixer && mixer.update(delta));\n\n  if (!armature) {\n    return null;\n  }\n\n  // get armature mesh children\n  const avatar = getArmatureChild(armature, \"avatar\") as SkinnedMesh;\n\n  return (\n    <group ref={group} {...rest} dispose={null} rotation-y={0}>\n      <group\n        name=\"Armature\"\n        rotation-x={Math.PI / 2}\n        scale={0.00615}\n        position-y={0}\n        frustumCulled={false}\n      >\n        {rig && <primitive object={rig} />}\n        {getSkinnedMesh(avatar, materials[\"avatar.mat\"])}\n      </group>\n    </group>\n  );\n}\n\n// helper, create explicit skinnedMesh object as react component\nconst getSkinnedMesh = (object: SkinnedMesh, material: THREE.Material) => {\n  return (\n    <skinnedMesh\n      material={material}\n      geometry={object.geometry}\n      skeleton={object.skeleton}\n      frustumCulled={false}\n    />\n  );\n};\n\n// helper, get one of children from the armature, returns undefined if not found\nconst getArmatureChild = (armature: Object3D, id: \"avatar\" | \"rig\") => {\n  switch (id) {\n    case \"avatar\":\n      return armature.children.find((ch) => ch.name === \"avatar\");\n    case \"rig\":\n      return armature.children.find((ch) => ch.name === \"mixamorigHips\");\n  }\n\n  return undefined;\n};\n\nuseGLTF.preload(FILE_URL);\n"]},"metadata":{},"sourceType":"module"}